#!/bin/bash

# radio - Bash shell script for listening radio basically

# Copyright 2020, Taeseong Ryu <formeu2s@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANT-ABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.



### description:
#
# play music from various sources such as radio, youtube and local storage
#

# HTTP Error 429: Too Many Requests
# workaround:
# extract cookies from browser (extension: cookies.txt)
# add --cookies /path/to/cookies/file.txt in youtube-dl config file
#



### TODO
#
# curl, google code
# completion suggest for zsh
# visit the web-page playing youtube_search's result
# 1-1 loop
# select loop
# last selected item coloring
# custom_select() for default_value and coloring



shopt -s globstar # Allow ** for recursive matches
set -u # avoid a undeclared variable
# set -x # for debugging
g_arg=( "$@" )
g_arg0="$0"
SCRIPT_VERSION=0.2.0
PS3='
# 00 for all
choose : '
PLAYER=mpv
LOCAL_VIDEO_DIR=/mnt/data/Videos/
LOCAL_MUSIC_DIR=/mnt/data/Music/
LOCAL_MUSIC_EXT='\.(mp3|flac)$'
SCRIPT_PATH=$(realpath "$g_arg0") # test
SCRIPT_DIR="${SCRIPT_PATH%/*}"
SCRIPT_NAME="${SCRIPT_PATH##*/}"
ARR_YOUTUBE_RESULT="$SCRIPT_DIR"/arr_youtube_result
ARR_YOUTUBE_SEARCH="$SCRIPT_DIR"/arr_youtube_search
ENGLISH_RADIO_PATH="$SCRIPT_DIR"/english_radio
KOREAN_RADIO_PATH="$SCRIPT_DIR"/korean_radio
JAPANESE_RADIO_PATH="$SCRIPT_DIR"/japanese_radio
LIVE_CAMERA_PATH="$SCRIPT_DIR"/live_camera
LIVE_NEWS_PATH="$SCRIPT_DIR"/live_news
LIVE_TV_PATH="$SCRIPT_DIR"/live_tv
LOCAL_MUSIC_PATH="$SCRIPT_DIR"/local_music
MUSIC_VIDEO_PATH="$SCRIPT_DIR"/music_video
PLAY_LIST_PATH="$SCRIPT_DIR"/play_list
XXX_PATH="$SCRIPT_DIR"/xxx # no public
#
# last line need ^$ for cat
#
RADIO_LIST=$(cat "$ENGLISH_RADIO_PATH" \
                 "$KOREAN_RADIO_PATH" \
                 "$JAPANESE_RADIO_PATH")
LIVE_LIST=$(cat "$LIVE_CAMERA_PATH" \
                "$LIVE_NEWS_PATH" \
                "$LIVE_TV_PATH")
URL_LIST=$(cat "$ENGLISH_RADIO_PATH" \
               "$KOREAN_RADIO_PATH" \
               "$JAPANESE_RADIO_PATH" \
               "$LIVE_CAMERA_PATH" \
               "$LIVE_NEWS_PATH" \
               "$LIVE_TV_PATH" \
               "$MUSIC_VIDEO_PATH" \
               "$PLAY_LIST_PATH" \
               "$XXX_PATH")
NOTSODEEP_PATH="$HOME"/git/notsodeep/notsodeep
YT_PREFIX='https://www.youtube.com/watch?v='
BASH_COMPLETION_PATH="$SCRIPT_DIR"/radio-completion.bash
REPORT_PATH="$SCRIPT_DIR"/report
REPORT_START_LINE='### ERROR REPORT'
TEST_TIME=10 # secs
DUMP_RETRY_AFTER=1 # youtube-dl --json-dump
DUMP_SUCCESS_SOUND_PATH=/mnt/data/Sound/Alert.mp3
#
# basic regex escape ‘\?’, ‘\+’, ‘\|’, ‘\{’, '\}', ‘\(’, and ‘\)’
#
SKIP_PATTERN='^#\?$\|^##\+\|^#[^ ]\|^#  \+'
# error code
E_IN_A_ROW=64
E_NO_MATCH_REGEX=65
E_FAIL_DUMP_YOUTUBE=66
E_NOT_SYNC_PROPERTIES=67
E_NOT_EXIST_SEARCH_OR_RESULT=69
E_NO_PARAM=99
# color code
C_ERROR='\e[1;38;5;88m'
C_WARN='\e[1;38;5;88m'
C_FAIL='\e[1;38;5;88m'
C_SUCCESS='\e[1;38;5;98m'
C_LIST_TITLE='\e[1;38;5;117m'
C_LIST_BODY='\e[1;38;5;240m'
C_LIST_NUMBER='\e[1;38;5;40m'
C_TITLE='\e[1;38;5;88m'
C_INFO='\e[1;38;5;88m'
C_DESCRIPT='\e[1;38;5;88m'



back_trace() {
    # local max_length
    local caller_line caller_funcname caller_frame caller_result
    local max_line max_funcname max_frame
    local i=0
    # for k in ${!FUNCNAME[@]}; do
    #     if (( ${#FUNCNAME[k]} > ${max_length:-0} )); then
    #         max_length=${#FUNCNAME[k]}
    #     fi
    # done
    # printf "\n %${max_length}s | %-5d" \
    #      LINENO $LINENO
    # for k in ${!BASH_LINENO[@]}; do
    #     printf "\n %${max_length}s | %-5d" \
    #            ${FUNCNAME[k]} \
    #            ${BASH_LINENO[k]}
    # done
    while true ; do
        caller_result=$(caller $i)
        [[ -z $caller_result ]] && break
        arr_caller_funcname+=( $(cut -d ' ' -f 2 <<< $caller_result) )
        arr_caller_line+=( $(cut -d ' ' -f 1 <<< $caller_result) )
        arr_caller_frame+=( $(cut -d ' ' -f 3 <<< $caller_result) )
        ((i++))
    done
    for k in ${!arr_caller_funcname[@]}; do
        if (( ${#arr_caller_funcname[k]} > ${max_funcname:-0} )); then
            max_funcname=${#arr_caller_funcname[k]}
            #                                   ^
            # can remove $ for index
            #
        fi
    done
    for k in ${!arr_caller_line[@]}; do
        if (( ${#arr_caller_line[k]} > ${max_line:-0} )); then
            max_line=${#arr_caller_line[k]}
        fi
    done
    for k in ${!arr_caller_frame[@]}; do
        if (( ${#arr_caller_frame[k]} > ${max_frame:-0} )); then
            max_frame=${#arr_caller_frame[k]}
        fi
    done
    for k in ${!arr_caller_frame[@]}; do
        printf "%${max_funcname}s | %-${max_line}s | %-${max_frame}s\n" \
               ${arr_caller_funcname[k]} \
               ${arr_caller_line[k]} \
               ${arr_caller_frame[k]}
    done
    printf '\n'
}

test_print() {
    local arg1="$1"
    local arg2="$2"
    local items_number=0
    local p1='\n\e[1;38;5;40m%s item %s\e[0m\n'
    local p2='\n\e[1;38;5;40m%s items %s\e[0m\n'
    local p3='\n\e[1;38;5;220m%s | %s | %s\n\e[1;38;5;240m%s\e[0m'
    local caller_result=$(caller 0)
    local caller_line=$(cut -d ' ' -f 1 <<< $caller_result)
    local caller_funcname=$(cut -d ' ' -f 2 <<< $caller_result)
    local caller_frame=$(cut -d ' ' -f 3 <<< $caller_result)
    printf "$p3" \
           "${caller_funcname}()'s $arg1" \
           "$caller_line" \
           "$caller_frame" \
           "$arg2"
    [[ -n $arg2 ]] && items_number=$(wc -l <<< $arg2)
    if (( items_number == 1 )); then
        printf "$p1" $items_number
    elif (( items_number > 1 )); then
        printf "$p2" $items_number
    else
        printf "$p1" no
    fi
    return 0
}

print_shuffle_list() {
    local arg1="$1"
    local p1='\n\e[1;38;5;220m%s\e[0m\n'
    local p2='\n\e[1;38;5;240m%s\e[0m\n'
    local p3='\n\e[1;38;5;196m%s\e[0m\n\n'
    local p4='\e[1;38;5;24m%s\e[0m'
    local p5='\e[1;38;5;25m%s\e[0m'
    local p6='\e[1;38;5;26m%s\e[0m'
    local p7='\e[1;38;5;27m%s\e[0m'
    local items_number=0
    printf "$p1" shuffle_list
    printf "$p2" \
           "$(printf %b "$arg1")"
    #      ^            ^     ^ ^
    # need " " for printf and " " for arg1
    #
    [[ -n $arg1 ]] && items_number=$(wc -l <<< $arg1)
    if (( n_init_shuffle_list == 0 )); then
        printf "$p7" 'no item'
    elif (( n_init_shuffle_list == 1 )); then
        printf "$p7" '1 item'
    elif (( items_number == 1 )); then
        printf "\n${p7}${p6}${p5} ${p4}\n" \
               $items_number \
               '/' \
               $n_init_shuffle_list \
               'item'
    elif (( items_number > 1 )); then
        printf "\n${p7}${p6}${p5} ${p4}\n" \
               $items_number \
               '/' \
               $n_init_shuffle_list \
               'items'
    else
        printf "$p3" ' Something is wrong!'
        back_trace
        exit 1
    fi
    return 0
}

playing_youtube_print() {
    local arg0=( "$@" )
    local arg1="$1"
    local arg2="$2"
    local arg3="$3"
    local arg4="$4"
    local arg5="${5:-0}"
    local arg6="$6"
    local arg7="$7"
    local arg8="$8"
    local p1='\n\e[1;38;5;130m%s\e[0m\n'
    local p2="\n\e[1;38;5;142m%s | %s | %s | %.2f | %s\n%s\e[0m"
    local p3="\n\e[1;38;5;144m%s\e[0m\n\n"
    local IGNORE_DESCRIPTION_CHARS=3
    local DISPLAY_DESCRIPTION_LINES=10
    local DISPLAY_DESCRIPTION_CHARS=500
    local arg3_h arg3_m arg3_s arg8_wc_w arg8_wc_l
    local line_wc_c
    local total=0
    local max_char=0
    # for i in "${!arg0[@]}"; do
    #   test_print arg$i "${arg0[i]}"
    # done
    arg1=$(printf %b "$arg1" | sed 's/\\"/"/g') # title
    arg2=$(date -d $arg2 +%Y/%m/%d) # date
    arg3=${arg3%.*} # workaround for 1234.0
    if (( arg3 )); then # duration
        # ^
        # can remove $ in ((  ))
        #
        arg3_h=$((arg3/3600))
        arg3_m=$((arg3/60%60))
        arg3_s=$((arg3%60))
        if (( arg3_h )); then
            arg3=$(printf "%02d:%02d:%02d" \
                          $arg3_h \
                          $arg3_m \
                          $arg3_s)
        else
            arg3=$(printf "%02d:%02d" \
                          $arg3_m \
                          $arg3_s)
        fi
    else
        arg3=LIVE
    fi
    #
    # k, M, G, T, P, E, Z, Y
    # k, M, B, T, Q, Q, S, S
    #
    arg4=$(numfmt --to=si $arg4 | sed 's/G/B/')
    arg5=$(echo "$arg5 * 20" | bc) # rating
    arg6=$(printf %b "$arg6") # uploader
    arg8=$(printf %b "$arg8" | sed 's/\\"/"/g') # description
    #                                 ^^    ^
    # need \\ for literally '\'
    #
    # g for all occurrence
    #
    printf "$p1" \
           "$arg1"
    printf "$p2" \
           "$arg2" \
           "$arg3" \
           "$arg4" \
           $arg5 \
           "$arg6" \
           "$arg7"
    #
    # remove too short or too long description
    #
    # only 1 line can be too long
    #
    arg8_wc_c=$(wc -c <<< $arg8) # 500
    arg8_wc_l=$(wc -l <<< $arg8) # 10
    readarray -t arr_arg8 <<< $arg8
    for line in "${arr_arg8[@]}"; do
        line_wc_c=$(wc -c <<< $line)
        if (( line_wc_c > max_char )); then
            max_char=$line_wc_c
        fi
    done
    if (( arg8_wc_c > IGNORE_DESCRIPTION_CHARS )); then # too short description
        if (( max_char > 120 )); then # a long line
            arg8= # need null string
            for line in "${arr_arg8[@]}"; do
                line_wc_c=$(wc -c <<< $line)
                total=$((total+line_wc_c))
                # printf "line0 is $line\n"
                # printf "total0 is $total\n"
                arg8+="${line:+$'\n'}$line" # this line's position matters
                if (( total > DISPLAY_DESCRIPTION_CHARS )); then
                    # printf "total is $total\n"
                    # printf "line is $(wc -l <<< $arg8)/${#arr_arg8[@]}"
                    arg8+=' ,,,'
                    break
                fi
            done
        elif (( arg8_wc_l > DISPLAY_DESCRIPTION_LINES )); then # too many lines
            arg8=$(head -n 10 <<< $arg8)
            arg8+=' ,,,'
        fi
        printf "$p3" \
               "$arg8"
    fi
    return 0
}

playing_print() {
    local arg1="$1"
    local p1='\n\e[1;38;5;130m %s\e[0m\n\n'
    # test_print arg1 "$arg1"
    if [[ $arg1 =~ (.*)[[:space:]]https?:// ]]; then
        # printf "$p1" "$(sed 's/http.*//' <<< $arg1)"
        printf "$p1" "${BASH_REMATCH[1]}" # test
    elif [[ $arg1 =~ /$ ]]; then
        printf "$p1" "$arg1"
    elif [[ $arg1 =~ (.*)[[:space:]]/mnt/ ]]; then
        # printf "$p1" "$(sed 's!/mnt/.*!!' <<< $arg1)"
        printf "$p1" "${BASH_REMATCH[1]}"
    else
        printf "$p1" "$arg1"
    fi
    return 0
}

make_namelist() {
    #
    # grep 'and' option
    #
    local arg1="$1"
    local reverse=
    local name_part names_part
    declare -g input_lines=
    #                      ^
    # need null string
    #
    local input_line names_part_lines
    if [[ -n ${REPLY:-} ]]; then
        #
        # need ${REPLY/ /$'\n'}
        #
        # equivalent:
        # oIFS="$IFS"; IFS=' '; ... <<< $REPLY ; IFS="$oIFS"
        #
        readarray -t arr_namelist <<< ${REPLY/ /$'\n'}
    else
        arr_namelist=( "${g_arg[@]}" )
        #              ^           ^
        # need " " such as 'lsd sia'
        #
    fi
    readarray -t arr_arg1 <<< $arg1
    for line in "${arr_arg1[@]}"; do # duplicated, to function
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            name_part=$(sed 's/"title": "//' <<< $line \
                                  | sed 's/" "upload_date": ".*//')
        elif [[ $line =~ [[:space:]]https?:// ]]; then
            name_part=$(sed 's/ http.*//' <<< $line)
        elif [[ $line =~ ^/mnt/ ]]; then
            name_part=$(sed 's!.*/Music/!!'<<< $line)
        elif [[ $line =~ [[:space:]]/mnt/ ]]; then
            name_part=$(sed 's!/mnt/.*!!' <<< $line)
        else
            name_part="$line"
        fi
        names_part+=${names_part:+$'\n'}"$name_part"
    done
    # test_print names_part "$names_part"
    for value in "${arr_namelist[@]}"; do
        if [[ -z ${names_part_lines:-} ]]; then
            # test_print value1 "$value"
            [[ $value =~ ^-+[a-z]+ ]] && continue
            names_part_lines=$(grep -i "$value" <<< $names_part)
        else
            # test_print value2 "$value"
            if [[ $value == -v ]]; then
                reverse=v
                continue
            fi
            names_part_lines=$(grep -i$reverse "$value" <<< $names_part_lines)
            [[ -n $reverse ]] && reverse=
        fi
    done
    # test_print names_part_lines "$names_part_lines"
    if [[ -z $names_part_lines ]]; then
        printf '\n\e[1;38;5;88m%s\e[1;38;5;240m%s\e[1;38;5;88m%s\n\e[0m' \
               '@@@' \
               " error occurred | ${FUNCNAME[0]} | $LINENO " \
               '@@@'
        printf '\n \e[1;38;5;88m%s\e[0m\n\n' \
               "No match with '${arr_namelist[@]}'"
        exit $E_NO_MATCH_REGEX
    fi
    readarray -t arr_names_part_lines <<< $names_part_lines
    for line in "${arr_names_part_lines[@]}"; do
        input_line=$(grep -i "$line" <<< $arg1)
        input_lines+=${input_lines:+$'\n'}"$input_line"
    done
    # test_print input_lines "$input_lines"
    return 0
}

make_shuffle_list() {
    local arg1="$1"
    local print_name print_names
    arg1=$(sed 's/^# //' <<< $arg1)
    readarray -t arr_arg1 <<< $arg1
    for line in "${arr_arg1[@]}"; do
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            print_name=$(sed 's/"title": "//' <<< $line \
                                  | sed 's/" "upload_date": ".*//')
        elif [[ $line =~ [[:space:]]https?:// ]]; then
            print_name=$(sed 's/ http.*//' <<< $line)
        elif [[ $line =~ ^/mnt/ ]]; then
            print_name=$(sed 's!.*/Music/!!'<<< $line)
        elif [[ $line =~ [[:space:]]/mnt/ ]]; then
            print_name=$(sed 's!/mnt/.*!!' <<< $line)
        else
            print_name="$line"
        fi
        print_names+=${print_names:+$'\n'}"$print_name"
    done
    print_shuffle_list "$print_names"
    return 0
}

shuffle_list() {
    #
    # all items must be selected only once for one-cycle
    #
    # uses shuf
    #
    local arg1="$1"
    local firstshuffle
    declare -g shuffle_list n_init_shuffle_list shuffle_radio last_shuffle
    # test_print arg1 "$arg1"
    [[ -z $arg1 ]] && exit $E_NO_PARAM
    if [[ -z ${shuffle_list:-} ]]; then
        n_init_shuffle_list=$(wc -l <<< $arg1)
        first_shuffle=$(shuf -n 1 <<< $arg1)
        #
        # avoid selecting the same item in a row
        #
        if [[ $first_shuffle == ${last_shuffle:-} ]]; then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   reshuffling ...
            return $E_IN_A_ROW
        else
            make_shuffle_list "$arg1"
            shuffle_list=$(grep -vF "$first_shuffle" <<< $arg1)
            #                     ^
            # need -F
            #
            shuffle_radio="$first_shuffle"
        fi
    else
        make_shuffle_list "$shuffle_list"
        last_shuffle=$(shuf -n 1 <<< $shuffle_list)
        shuffle_list=$(grep -vF "$last_shuffle" <<< $shuffle_list)
        shuffle_radio="$last_shuffle"
    fi
    # eval "$2=\$arg2" # for returning a string
    return 0
}

play_youtube() {
    local arg1="$1"
    local p_title p_date p_average_rating p_view_count
    local p_duration p_uploader p_webpage_url p_description
    local s1
    # test_print arg1 "$arg1"
    s1=$(printf '%s%s%s%s%s%s%s%s' \
                '^"title": "\(.*\)" ' \
                '"upload_date": "\([0-9]\{8\}\)" ' \
                '"duration": \([0-9.]\+\) ' \
                '"view_count": \([0-9]\+\) ' \
                '"average_rating": \([0-9.]\+\) ' \
                '"uploader": "\(.*\)" ' \
                '"webpage_url": "\(.*\)" ' \
                '"description": "\(.*\)"$')
    p_title=$(sed "s/$s1/\1/" <<< $arg1)
    p_date=$(sed "s/$s1/\2/" <<< $arg1)
    p_duration=$(sed "s/$s1/\3/" <<< $arg1)
    p_view_count=$(sed "s/$s1/\4/" <<< $arg1)
    p_average_rating=$(sed "s/$s1/\5/" <<< $arg1)
    p_uploader=$(sed "s/$s1/\6/" <<< $arg1)
    p_webpage_url=$(sed "s/$s1/\7/" <<< $arg1)
    p_description=$(sed "s/$s1/\8/" <<< $arg1)
    playing_youtube_print "$p_title" \
                          $p_date \
                          $p_duration \
                          $p_view_count \
                          $p_average_rating \
                          "$p_uploader" \
                          "$p_webpage_url" \
                          "$p_description"
    #
    # 1>/dev/null disable information
    # 2>/dev/null disable process-bar
    # &>/dev/null disable all and can not control
    #
    $PLAYER "$p_webpage_url" 2>/dev/null
    return 0
}

play() {
    local arg1="$1"
    local execute_part name_part head_part option_part
    local p1='\n \e[1;31m%s\e[0m\n\n' \
    # test_print arg1 "$arg1"
    arg1=$(sed 's/^# / /' <<< $arg1)
    if [[ $arg1 =~ [[:space:]]https?:// ]]; then
        name_part=$(sed 's! https\?://.*!!' <<< $arg1)
    elif [[ $arg1 =~ /$ ]]; then
        name_part="$arg1"
    elif [[ $arg1 =~ ^/mnt/ ]]; then
        name_part=$(sed 's!.*/Music/!!g' <<< $arg1)
    elif [[ $arg1 =~ [[:space:]]/mnt/ ]]; then
        name_part=$(sed 's! /mnt/.*!!' <<< $arg1)
    else
        printf "$p1" \
               'Something is wrong!'
        back_trace
        exit 1
    fi
    # test_print name_part "$name_part"
    if [[ $arg1 =~ [[:space:]]https?:// ]]; then
        execute_part=${arg1/*http/http}
    elif [[ $arg1 =~ /$ ]]; then
        execute_part="$LOCAL_MUSIC_DIR""$arg1"
    elif [[ $arg1 =~ ^/mnt/ ]]; then
        execute_part="$arg1"
    elif [[ $arg1 =~ [[:space:]]/mnt/ ]]; then
        execute_part=${arg1/*mnt//mnt}
    else
        printf "$p1" \
               'Something is wrong!'
        back_trace
        exit 1
    fi
    #test_print execute_part "$execute_part"
    playing_print "$name_part"

    if [[ $execute_part =~ [[:space:]]--[a-z]+ ]]; then
        head_part=${execute_part%% --*}
        #                         ^
        # need space for trailing
        #
        option_part=${execute_part#"$head_part" }
        #                          ^          ^^
        # need quotes and space
        #
        # test_print head_part "$head_part"
        # test_print option_part "$option_part"
        $PLAYER "$head_part" $option_part
        #                   ^            ^
        # don't quote options
        #
    else
        $PLAYER "$execute_part"
    fi
    return 0
}

play_radio() {
    while true; do
        radio_list=$(grep -v "$SKIP_PATTERN" <<< $RADIO_LIST)
        shuffle_list "$radio_list"
        (( $? == E_IN_A_ROW )) && continue
        play "$shuffle_radio"
        sleep 0.1 # needed for C-c
    done
    return 0
}

show_all(){
    radio .
    return 0
}

play_group() {
    local group_list
    # test_print URL_LIST $URL_LIST
    case "${g_arg[1]}" in
        en | english    ) group_list=$(<"$ENGLISH_RADIO_PATH");;
        kr | korean     ) group_list=$(<"$KOREAN_RADIO_PATH");;
        jp | japanese   ) group_list=$(<"$JAPANESE_RADIO_PATH");;
        mv | musicvideo ) group_list=$(<"$MUSIC_VIDEO_PATH");;
        lt | livetv     ) group_list=$(<"$LIVE_TV_PATH");;
        ln | livenews   ) group_list=$(<"$LIVE_NEWS_PATH");;
        lc | livecam    ) group_list=$(<"$LIVE_CAMERA_PATH");;
        pl | playlist   ) group_list=$(<"$PLAY_LIST_PATH");;
        *)
            printf '\n %s\e[1;31m %s\e[0m %s\n' \
                   'There is no' \
                   "'${g_arg[1]}'" \
                   'group.'
            cat <<HEREDOC
 Usage : radio -g option
 Option: en - English Radio
         kr - Korean Radio
         jp - Japanese Radio
         mv - Music Video
         lt - Live TV
         ln - Live News
         lc - Live Camera
         pl - Play List
HEREDOC
            # back_trace
            exit 2
            ;;
    esac
    while true; do
        group_list=$(grep -v "$SKIP_PATTERN" <<< $group_list)
        shuffle_list "$group_list"
        (( $? == E_IN_A_ROW )) && continue
        play "$shuffle_radio"
        sleep 0.1 # needed for C-c
    done
    return 0
}

select_one_input_line() {
    local names_count=$(wc -l <<< $input_lines)
    if (( names_count > 1 )); then
        select_list "$arg1" "$input_lines" # select_list's arg1
    fi
    return 0
}

select_play() {
    local shuffle_line
    # test_print arg1 "$arg1" # arg1 is select_list()'s
    while true; do
        shuffle_list "$input_lines"
        (( $? == E_IN_A_ROW )) && continue
        # test_print shuffle_radio "$shuffle_radio"
        shuffle_line=$(grep -iF "$shuffle_radio" <<< $arg1)
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            play_youtube "$shuffle_line" # need
        else
            play "$shuffle_line"
        fi
        sleep 0.1 # needed for C-c
    done
    return 0
}

select_all() {
    printf '\n %s\n' \
           'You chose all items.'
    select_play
    return 0
}

select_sed() {
    local sed_reply
    printf '\n %s\n' \
           'You selected multiple items with - and numbers.'
    #
    # transform for sed
    #  3-5 7 11 15-20         --> 3,5p;7p;11p;15,20p
    #    3     -5  7  8-   9  --> 3,5p;7p;8,9p
    #   -  2     6  -         --> 1,2p;6,{endline}p
    #
    sed_reply=$(sed 's/^ \+\| \+$//g' <<< $REPLY \
                | sed 's/ \+/ /g' \
                | sed 's/ -\|- /-/g' \
                | sed 's/ /p;/g' \
                | sed 's/-/,/g' \
                | sed 's/^,/1,/' \
                | sed "s/,$/,$grepcount/" \
                | sed 's/$/p/')
    # test_print REPLY "$REPLY"
    input_lines=$(sed -n "$sed_reply" <<< $input_lines)
    select_one_input_line
    select_play
    return 0
}

select_regex() {
    printf '\n %s\n' \
           'You selected items with regex.'
    make_namelist "$input_lines"
    # test_print input_lines "$input_lines"
    select_one_input_line
    select_play
    return 0
}

select_list() {
    local arg1="$1"
    local arg2="$2"
    local r1='[0-9]*[-\ ]+[0-9]*'
    local r2='[^0-9\ -]+'
    local p1='\n \e[1;31m%s\e[0m\n\n'
    local s1
    local input_name_part
    # test_print arg2 "$arg2"
    grepcount=$(grep -ic .  <<< $input_lines)
    if (( grepcount == 1 )); then
        grep_line=$(grep -iF "$arg2" <<< $arg1)
        #                  ^
        # grep '-F' for only string, such as "[live] tv"
        #                                     ^    ^
        play "$grep_line"
        sleep 0.1 # needed for C-c
    elif (( grepcount > 1 )); then
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            s1='s/"title": "\(.*\)" "upload_date": ".*/\1/'
            input_name_part=$(sed "$s1" <<< $arg2 \
                                  | sed 's/\\n/ /')
            #                              ^^^
            # "title" "도시의 그림자 -\n이 어둠의 이슬픔"
            #                      ^^
            # in select(), added one more line
            #
            # test_print input_name_part "$input_name_part"
        elif [[ $arg2 =~ [[:space:]]https?:// ]]; then
            input_name_part=$(sed 's! https\?://.*!!' <<< $arg2)
        elif [[ $arg2 =~ ^/mnt/ ]]; then
            input_name_part=$(sed 's!.*/Music/!!g' <<< $arg2)
        elif [[ $arg2 =~ [[:space:]]/mnt/ ]]; then
            input_name_part=$(sed 's! /mnt/.*!!' <<< $arg2)
        elif [[ $arg2 =~ /$ ]]; then
            input_name_part="$arg2"
        else
            printf "$p1" \
                   'Something is wrong!'
            back_trace
            exit 1
        fi
        input_name_part=$(printf %b "$input_name_part" \
                                  | sed 's/\\"/"/g') # Unicode-to-utf8
        # test_print input_name_part "$input_name_part"
        readarray -t arr_names <<< $input_name_part
        printf '\n' # needed
        select line in "${arr_names[@]}"; do
            if [[ $REPLY =~ ^00$ ]]; then
                select_all
                exit 0
            elif [[ $REPLY =~ $r1 && ! $REPLY =~ $r2 ]]; then
                select_sed
                exit 0
            elif [[ $REPLY =~ [^0-9] ]]; then
                select_regex
                exit 0
            elif [[ -n $line ]]; then
                selected="$line"
                break
            else
                printf "$p1" \
                       'Something is wrong!'
                back_trace
                exit 1
            fi
        done
        grep_line=$(grep -iF "$selected" <<< $arg1)
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            play_youtube "$grep_line"
        else
            play "$grep_line"
        fi
        sleep 0.1 # needed for C-c
        exit 0
    fi
}

play_local() {
    local local_list
    local_list=$(sed 's/^# //' "$LOCAL_MUSIC_PATH")
    if [[ -z ${g_arg[1]:-} ]]; then
        while true; do
            local_list=$(grep -v "$SKIP_PATTERN" <<< $local_list)
            shuffle_list "$local_list"
            (( $? == E_IN_A_ROW )) && continue
            play "$shuffle_radio"
            sleep 0.1 # needed for C-c
        done
    else
        local_list=
        for file in "$LOCAL_MUSIC_DIR"**/*; do
            if [[ $file =~ $LOCAL_MUSIC_EXT ]]; then
                local_list+="${local_list:+$'\n'}$file"
            fi
        done
        # test_print local_list "$local_list"
        make_namelist "$local_list"
        select_list "$local_list" "$input_lines"
    fi
    return 0
}

test_items() {
    local last_bg_pid
    testlist=$(grep . <<< $URL_LIST)
    cat > "$REPORT_PATH" <<< $REPORT_START_LINE
    while read -r line; do
        (( $(grep -c "$SKIP_PATTERN" <<< $line) )) && continue
        playing_print "$line"
        play $line &
        last_bg_pid=$!
        sleep $TEST_TIME
        if (( $(ps aux | grep -c $last_bg_pid) == 1 )); then
            echo "$line" >> "$REPORT_PATH"
        else
            kill $last_bg_pid
        fi
    done <<< $testlist
    printf '\n %s\n\n' \
           'REPORT:'
    cat "$REPORT_PATH"
    return 0
}

edit_this() {
    $EDITOR "$g_arg0"
    return 0
}

print_version() {
    printf '\n%s: %s\n' \
           "$SCRIPT_NAME" \
           "$SCRIPT_VERSION"
    return 0
}

help_usage() {
    cat << HEREDOC

Usage: radio [name] or radio option [arg ...]

radio
      - plays a shuffled radio, press 'q' to play the next.
        this loops infinitely, press Ctrl-c repeatedly to exit.

radio "regex"
      - plays a searched item.
        need quote for "or" regex searching like "wordA\|wordB".
        don't need quote for "and" regex searching, only need white-space.
        use -v for inverting match
        select items like 3-5 7 11 15-20, -2 6- ,  2  - 7  8
        search narrowly until only one chosen or all chosen
        press 00 to select all items
        ex) radio "sia\|live\|tv" cam "mango\|full"
            radio sia -v lsd : include "sia" but not "lsd"

Options:

-a | --all
      - displays all urls

-g | --group {en|kr|jp|mv|lt|ln|lc|pl}
      - plays a shuffled radio in a group, press 'q' to play the next.
        this loops infinitely, press Ctrl-c repeatedly to exit.
        ex) radio -g jp : play only the Japanese radio randomly

-l | --local ["regex"]
      - plays a shuffled local music.
        this loops infinitely, press Ctrl-c repeatedly to exit.
        ex) radio -l sia : play only local files with sia

-x | --xxx ["regex"]
      - plays a XXX for private
      - asks your password for bypassing a blocked site

-y | --youtube [option] [phrase]
      - searches a phrase in youtube and plays the urls
      - if no option and no phrase, display the cached phrases
      - use alias : alias yt='radio -y', then yt 'something'
      - options
        -d : delete the cached phrase
        -u : update the cached phrase
        -U : update all the cached phrases
        -c : only search in the cached phrases

-t | --test
      - tests all radios whether work or not.
        If failed, it logs on the file named report.

-e | --edit
      - edit this script.

-h | --help
      - prints this help.

Exit Status:
Returns 0  unless an invalid option is supplied or an error occurs.

HEREDOC
    return 0
}

bypass_site() {
    #
    # bypass for the blocked sites
    #
    if (( ! $(ps -A | grep -c notsodeep) )); then
        sudo iptables \
             -A INPUT \
             -p tcp \
             --tcp-flags SYN,ACK SYN,ACK \
             --sport 443 \
             -j NFQUEUE \
             --queue-num 200 \
             --queue-bypass
        sudo "$NOTSODEEP_PATH" &
    fi
    return 0
}

play_xxx() { # private
    bypass_site
    xxx_list=$(grep -v "$SKIP_PATTERN" "$XXX_PATH" \
                   | sed 's/^# //')
    if [[ -z ${g_arg[1]:-} ]]; then
        while true; do
            shuffle_list "$xxx_list"
            (( $? == E_IN_A_ROW )) && continue
            play "$shuffle_radio"
            sleep 0.1 # needed for C-c
        done
    else
        # test_print xxx_list "$xxx_list"
        make_namelist "$xxx_list"
        select_list "$xxx_list" "$input_lines"
    fi
    return 0
}

display_cached_phrases() {
    local old_LANG
    local p1='\n\e[1;38;5;40m%s item %s\e[0m\n\n'
    local p2='\n\e[1;38;5;40m%s items %s\e[0m\n\n'
    local p3='\n\e[1;38;5;220m%s\n\e[1;38;5;240m%s\n\e[0m'
    local i=0
    old_LANG=$LANG
    LANG=ko_KR.utf-8 # for Korean style sort
    readarray -t arr_result_sort <<< \
              $(printf '%s\n' "${!arr_result[@]}" | sort -f)
    LANG=$old_LANG # restore
    for k in "${arr_result_sort[@]}"; do
        ((i++))
        if (( i > DISPLAY_C_PHRASE_LIMIT )); then
            c_phrase+=" | $k ..."
            break
        fi
        c_phrase+="${c_phrase:+ | }$k"
    done
    printf "$p3" \
           'the cached phrases' \
           "$c_phrase"
    case $i in
        0) printf "$p1" no;;
        1) printf "$p1" $i;;
        *) printf "$p2" $i;;
    esac
    exit 0
}

delete_cached_phrase() {
    #
    # -d delete the cached_phrase
    #
    local p1='\n\e[1;38;5;98m%s\e[0m\n\n'
    local p2='\n\e[1;38;5;88m%s\e[0m\n\n'
    local d_phrase="${g_arg[@]:2}"
    for k in "${!arr_result[@]}"; do
        if [[ $k == $d_phrase ]]; then
            d_matched=1
            unset arr_result["$d_phrase"]
            #                ^^        ^
            # need $ and " "
            #
            declare -p arr_result > "$ARR_YOUTUBE_RESULT"
            source $BASH_COMPLETION_PATH
            break
        fi
    done
    case $d_matched in
        1) printf "$p1" "deleted with '$d_phrase'"     exit 0;;
        *) printf "$p2" "not matched with '$d_phrase'" exit 1;;
    esac
    return 0
}

update_cached_phrase() {
    #
    # -u update the cached_phrase
    #
    local u_matched
    s_phrase="${g_arg[@]:2}"
    for k in "${!arr_result[@]}"; do
        if [[ $k == $s_phrase ]]; then
            s_rate=$((${arr_search[$s_phrase]}+1))
            arr_search[$s_phrase]=$s_rate
            u_matched=1
            break
        fi
    done
    if (( ! u_matched )); then
        printf "$p1" \
               "not matched with '$s_phrase'"
        exit 1
    fi
    return 0
}

update_cached_all() {
    #
    # -U update all the cached_phrase
    #
    # use for re-initializing cached list
    #
    local i=0 c=0
    for k in "${!arr_result[@]}"; do
        while [[ -z $result ]] ; do
            ((c++))
            if (( c > RETRY_DUMP_LIMIT )); then
                printf "$p1" \
                       'failed dumping, retry later!'
                exit $E_FAIL_DUMP_YOUTUBE
            fi
            ((i++))
            if (( c % 10 == 1)); then
                printf "$p2" \
                       "'$k': $i/${#arr_result[@]}" \
                       "list: $S_LIMIT" \
                       "interval: $DUMP_RETRY_AFTER" \
                       "retry: $c/$RETRY_DUMP_LIMIT" \
                       ${dots:-.}
                dots=.
            else
                dots+=.
            fi
            printf "$p3" \
                   "'$k': $i/${#arr_result[@]}" \
                   "list: $S_LIMIT" \
                   "interval: $DUMP_RETRY_AFTER" \
                   "retry: $c/$RETRY_DUMP_LIMIT" \
                   $dots
            result=$(youtube-dl -j ytsearch$S_LIMIT:"$k")
            [[ -z $result ]] && sleep $DUMP_RETRY_AFTER && continue
            r_title=$(grep -oP "$g1" <<< $result \
                          | sed 's/, "alt_title": .*//')
            r_date=$(grep -oP "$g2" <<< $result \
                         | sed 's/, "$//')
            r_duration=$(grep -oP "$g3" <<< $result \
                             | sed 's/, "age_limit": .*//' \
                             | sed 's/\.0//') # workaround for 1234.0
            r_rating=$(grep -oP "$g4" <<< $result \
                           | sed 's/,$//')
            r_count=$(grep -oP "$g5" <<< $result \
                          | sed 's/,$//')
            r_uploader=$(grep -oP "$g6" <<< $result \
                             | sed 's/, "$//')
            r_url=$(grep -oP "$g7" <<< $result \
                        | sed 's/,$//')
            r_description=$(grep -oP "$g8" <<< $result \
                                | sed 's/, "categories": //')
            # test_print r_description "$r_description"
            readarray -t arr_title <<< $r_title
            readarray -t arr_date <<< $r_date
            readarray -t arr_duration <<< $r_duration
            readarray -t arr_count <<< $r_count
            readarray -t arr_rating <<< $r_rating
            readarray -t arr_uploader <<< $r_uploader
            readarray -t arr_url <<< $r_url
            readarray -t arr_description <<< $r_description
            arr_total=( ${#arr_date[@]}        ${#arr_duration[@]}
                        ${#arr_count[@]}       ${#arr_rating[@]}
                        ${#arr_uploader[@]}    ${#arr_url[@]}
                        ${#arr_description[@]} )
            for each in ${arr_total[@]}; do
                # test_print each  $each
                if (( ${#arr_title[@]} != each )); then
                    printf "\n\n\e[1;38;5;88m%s\e[0m\n" \
                           'Not sync!'
                    printf '\n\e[1;38;5;240m%s\n\e[0m' \
                           " ${FUNCNAME[0]} | $LINENO "
                    printf '\n %s\n %s\n %s\n %s\n %s\n %s\n %s\n %s\n' \
                           "title       : ${#arr_title[@]}" \
                           "date        : ${#arr_date[@]}" \
                           "duration    : ${#arr_duration[@]}" \
                           "count       : ${#arr_count[@]}" \
                           "rating      : ${#arr_rating[@]}" \
                           "uploader    : ${#arr_uploader[@]}" \
                           "url         : ${#arr_url[@]}" \
                           "description : ${#arr_description[@]}"
                    sleep 1 # time to recognise this error
                    exit $E_NOT_SYNC_PROPERTIES
                fi
            done
            for l in ${!arr_title[@]}; do
                r_list+=$(printf "${r_list:+\n}%s %s %s %s %s %s %s %s" \
                                 "${arr_title[l]}" \
                                 "${arr_date[l]}" \
                                 "${arr_duration[l]}" \
                                 "${arr_count[l]}" \
                                 "${arr_rating[l]}" \
                                 "${arr_uploader[l]}" \
                                 "${arr_url[l]}" \
                                 "${arr_description[l]}")
            done
            r_list=$(sort -t '"' -k 5 <<< $r_list)
            last_search_date=$(date +%Y/%m/%d)
            if [[ $r_list =~ ^[0-9]{4}/[0-9]{2}/[0-9]{2} ]]; then
                search_count=$(cut -d ' ' -f 2 <<< $r_list)
            else
                search_count=1
            fi
            #
            # add last_search_date and search_count
            #
            r_list=$(printf "%s %s\n%s" \
                            "$last_search_date" \
                            "$search_count" \
                            "$r_list")
            arr_result+=( ["$k"]="$r_list" ) # test
        done
        # reset vars
        result=
        r_list= # need
        dots=
        c=0
        $PLAYER "$DUMP_SUCCESS_SOUND_PATH" &>/dev/null &
        printf '\n \e[1;38;5;98m%s\e[0m\n\n' \
               "'$k' is updated"
    done
    declare -p arr_result > "$ARR_YOUTUBE_RESULT"
    exit 0 # end all update
}

invalid_youtube_option() {
    printf '\n %s\e[1;31m %s\e[0m %s\n' \
           'There is no' \
           "'${g_arg[1]}'" \
           'option.'
    cat << HEREDOC
 Usage : radio -y option [ phrase ... ]
 Option: '' displays all cached phrases
         -d delete cached phrase
         -c search only in cached phrases
         -u update the cached phrase
         -U update all the cached phrases
HEREDOC
exit 2
}

without_youtube_option() {
    local last_search_date s_rate
    for k in "${!arr_result[@]}"; do
        if [[ $k == $s_phrase ]]; then
            r_list="${arr_result[$k]}"
            s_rate=$(head -n 1 <<< $r_list | cut -d ' ' -f 2)
            s_rate=$((s_rate+1))
            r_list=$(sed "s/ [0-9]\+/ $s_rate/" <<< $r_list)
            arr_result[$s_phrase]="$r_list"
            break
        fi
    done
    if [[ -n $r_list ]]; then
        declare -p arr_result > "$ARR_YOUTUBE_RESULT"
        last_search_date=$(head -n 1 <<< $r_list | cut -d ' ' -f 1)
        input_lines=$(tail -n +2 <<< $r_list) # for select_list()
        PS3="
Last updated: $last_search_date
choose : "
        select_list "$input_lines" "$input_lines"
    fi
    return 0
}

youtube_search() {
    #
    # with youtube-dl --json-dump
    #
    local s_phrase="${g_arg[@]:1}"
    local S_LIMIT=50
    local MAX_CACHE=10000
    local DISPLAY_C_PHRASE_LIMIT=100
    local RETRY_DUMP_LIMIT=10
    local result=
    local r_list=
    local the_list=
    local r_title r_date r_duration r_count
    local r_rating r_uploader r_url r_description
    local c_phrase s_rate
    local last_search_date dots
    local i=0 c=0
    local s1='s/.*" "upload_date": "\(.*\)" "duration": .*/\1/'
    local g1='"title": ".*?", "alt_title": '
    local g2='"upload_date": ".*?", "'
    local g3='"duration": .*?, "age_limit": '
    local g4='"average_rating": .*?,'
    local g5='"view_count": .*?,'
    local g6='"uploader": ".*?", "'
    local g7='"webpage_url": ".*?",'
    local g8='"description": ".*?", "categories": '
    local p1='\n \e[1;38;5;88m%s\e[0m\n\n'
    local p2='\r\e[1;38;5;117m%s | %s | %s | %s\e[1;38;5;0m %s\e[0m'
    local p3='\r\e[1;38;5;117m%s | %s | %s | %s\e[1;38;5;40m %s\e[0m'
    [[ -e $ARR_YOUTUBE_RESULT ]] \
        && source "$ARR_YOUTUBE_RESULT" || declare -A arr_result=()
    case ${g_arg[1]:-} in
        ''                ) display_cached_phrases ;;
        -d | --delete     ) delete_cached_phrase   ;;
        -c | --cached     ) search_cached_phrase   ;;
        -u | --update     ) update_cached_phrase   ;;
        -U | --update_all ) update_cached_all      ;;
        -*                ) invalid_youtube_option ;;
        *                 ) without_youtube_option ;;
    esac
    if [[ -z $result ]]; then
        printf '\n'
        p2='\e[1;38;5;117m %s | %s | %s | %s\e[1;38;5;0m %s\e[0m\r'
        p3='\e[1;38;5;117m %s | %s | %s | %s\e[1;38;5;40m %s\e[0m\r'
        c=0
        i=0
        while [[ -z $result ]]; do
            ((c++))
            if (( c > RETRY_DUMP_LIMIT )); then
                printf "$p1" \
                       'Fail dumping. Retry later!'
                exit $E_FAIL_DUMP_YOUTUBE

            fi
            ((i++))
            if (( c % 10 == 1)); then
                printf "$p2" \
                       "$s_phrase" \
                       "list: $S_LIMIT" \
                       "interval: $DUMP_RETRY_AFTER" \
                       "retry: $c/$RETRY_DUMP_LIMIT" \
                       ${dots:-.}
                dots=.
            else
                dots+=.
            fi
            printf "$p3" \
                   "$s_phrase" \
                   "list: $S_LIMIT" \
                   "interval: $DUMP_RETRY_AFTER" \
                   "retry: $c/$RETRY_DUMP_LIMIT" \
                   $dots
            result=$(youtube-dl -j ytsearch${S_LIMIT}:"${s_phrase}")
            [[ -z $result ]] && sleep $DUMP_RETRY_AFTER
        done
        printf '\n'
        $PLAYER "$DUMP_SUCCESS_SOUND_PATH" &>/dev/null & # notice for success
        if (( ${#arr_result[@]} >= MAX_CACHE )); then
            for k in "${!arr_search[@]}"; do
                if (( ${arr_result[$k]} <= ${min_rate:-10} )); then
                    min_rate=${arr_result[$k]}
                    min_key="$k"
                fi
            done
            unset arr_result["$min_key"]
            #                ^^       ^
            # all needed # test
            #
            printf '\n \e[1;31m%s - %s\e[0m\n' \
                   "'$min_key' has been removed" \
                   "$min_rate rated."
        fi
    fi
    #
    # youtube-dl json_dump_key_order:
    #
    # "id"                 "uploader"       "uploader_id" "uploader_url"
    # "channel_id"         "channel_url"    "upload_date" "license"
    # "creator"            "title"          "alt_title"   "thumbnails"
    # "description"        "categories"     "tags"        "subtitles"
    # "automatic_captions" "duration"       "age_limit"   "annotations"
    # "chapters"           "webpage_url"    "view_count"  "like_count"
    # "dislike_count"      "average_rating" "formats"
    #
    # test_print result "$result"
    r_title=$(grep -oP "$g1" <<< $result \
                  | sed 's/, "alt_title": .*//')
    r_date=$(grep -oP "$g2" <<< $result \
                 | sed 's/, "$//')
    #
    # after updating youtube-dl-2020.11.01,
    #
    # "duration": 1243 => "duration": 1234.0
    #
    r_duration=$(grep -oP "$g3" <<< $result \
                     | sed 's/, "age_limit": .*//' \
                     | sed 's/\.0//') # workaround for 1234.0
    # test_print r_duration "$r_duration"
    r_rating=$(grep -oP "$g4" <<< $result \
                   | sed 's/,$//')
    #
    # after updating youtube-dl-2020.11.01,
    #
    # "view_count": 4567 => "view_count": 4
    #
    r_count=$(grep -oP "$g5" <<< $result \
                  | sed 's/,$//')
    r_uploader=$(grep -oP "$g6" <<< $result \
                     | sed 's/, "$//')
    r_url=$(grep -oP "$g7" <<< $result \
                | sed 's/,$//')
    #
    # after updating youtube-dl-2020.11.01,
    #
    # "description": abc => "description": abc...
    #
    r_description=$(grep -oP "$g8" <<< $result \
                        | sed 's/, "categories": //')
    #test_print r_description "$r_description"
    readarray -t arr_title <<< $r_title
    readarray -t arr_date <<< $r_date
    readarray -t arr_duration <<< $r_duration
    readarray -t arr_count <<< $r_count
    readarray -t arr_rating <<< $r_rating
    readarray -t arr_uploader <<< $r_uploader
    readarray -t arr_url <<< $r_url
    readarray -t arr_description <<< $r_description
    arr_total=( ${#arr_date[@]}        ${#arr_duration[@]}
                ${#arr_count[@]}       ${#arr_rating[@]}
                ${#arr_uploader[@]}    ${#arr_url[@]}
                ${#arr_description[@]} )
    #
    # concisely check for parsing result
    #
    for each in ${arr_total[@]}; do
        if (( ${#arr_title[@]} != each )); then
            printf '\n\e[1;38;5;88m%s\e[1;38;5;240m%s\e[1;38;5;88m%s\n\e[0m' \
                   '@@@' \
                   ' error occurred ' \
                   '@@@'
            printf '\n\e[1;38;5;240m%s\n\e[0m' \
                   " ${FUNCNAME[0]} | $LINENO "
            printf '\n %s\n %s\n %s\n %s\n %s\n %s\n %s\n %s\n' \
                   "title       : ${#arr_title[@]}" \
                   "date        : ${#arr_date[@]}" \
                   "duration    : ${#arr_duration[@]}" \
                   "count       : ${#arr_count[@]}" \
                   "rating      : ${#arr_rating[@]}" \
                   "uploader    : ${#arr_uploader[@]}" \
                   "url         : ${#arr_url[@]}" \
                   "description : ${#arr_description[@]}"
            sleep 1 # time to recognise this error
            break
        fi
    done
    for l in ${!arr_title[@]}; do
        r_list+=$(printf "${r_list:+\n}%s %s %s %s %s %s %s %s" \
                         "${arr_title[l]}" \
                         "${arr_date[l]}" \
                         "${arr_duration[l]}" \
                         "${arr_count[l]}" \
                         "${arr_rating[l]}" \
                         "${arr_uploader[l]}" \
                         "${arr_url[l]}" \
                         "${arr_description[l]}")
        #                                   ^
        # $ can be removed for array index
        #
    done
    r_list=$(sort -t '"' -k 5 <<< $r_list)
    #                       ^
    # allow to add 3 extra " in title
    #
    last_search_date=$(date +%Y/%m/%d)
    search_count=1
    # last_date=$(tail -n 1 <<< $r_list \
    #                 | sed "$s1" \
    #                 | xargs date +%Y/%m/%d -d)
    input_lines="$r_list" # for select_list()
    # test_print input_lines "$input_lines"
    r_list=$(printf "%s %s\n%s" \
                    "$last_search_date" \
                    "$search_count" \
                    "$r_list")
    arr_result+=( ["$s_phrase"]="$r_list" ) # test
    if [[ ${g_arg[1]} != -c ]]; then
        declare -p arr_result > "$ARR_YOUTUBE_RESULT"
        source $BASH_COMPLETION_PATH
    fi
    PS3="
Last uploaded: $last_search_date
choose : "
    select_list "$r_list" "$input_lines"
    return 0
}



#
# case uses * ? [...] | as matching pattern
#
# it doesn't use regex and variables basically
#
# if you need these, use regex condition: [[  =~  ]]
#
case "${g_arg[0]:-}" in
    ''             ) play_radio     && exit 0;;
    -a | --all     ) show_all       && exit 0;;
    -g | --group   ) play_group     && exit 0;;
    -l | --local   ) play_local     && exit 0;;
    -x | --xxx     ) play_xxx       && exit 0;;
    -y | --youtube ) youtube_search && exit 0;;
    -t | --test    ) test_items     && exit 0;;
    -e | --edit    ) edit_this      && exit 0;;
    -v | --version ) print_version  && exit 0;;
    -h | --help    ) help_usage     && exit 0;;
    -*)
        printf '\n %s\e[1;31m %s\e[0m %s\n' \
               'There is no' \
               "'${g_arg[0]}'" \
               'option.'
        cat <<HEREDOC
 Usage : radio [name] or radio option [arg ...]
 Option: -a displays all urls
         -g {en|kr|jp|mv|lt|ln|lc|pl} plays a group
         -l ["regex"] plays a shuffled local music.
         -x ["regex"] plays a XXX for private.
         -y [option] [phrase] searches a phrase in youtube
         -t tests all radios
         -e edit this script.
         -v prints version
         -h prints help
HEREDOC
        exit 2
        ;;
esac
make_namelist "$URL_LIST"
input_lines=$(grep -v "$SKIP_PATTERN" <<< $input_lines \
                  | sed 's/^# //')
# test_print input_lines "$input_lines"
select_list "$URL_LIST" "$input_lines"

#  LocalWords:  dl ytsearch
