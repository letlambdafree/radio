#!/bin/bash

# radio - Bash shell script for listening radio basically

# Copyright 2020, Taeseong Ryu <formeu2s@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

# this script for my personal purpose like playing music from various sources
# like radio, youtube, local storage
# and can search youtube directly and play the media in terminal
#
# Usage: radio [name] or radio option [arg ...]
#
# in 'select()', you can search narrowly, regex, range and default option
#
# radio
#       - plays a shuffled radio, press 'q' to play the next.
#         this quits the mpv and starts a mpv again.
#         this loops infinitely, press Ctrl-c repeatedly to exit.
#
# radio "regex"
#       - plays a searched item.
#         need quote for "or" regex searching like "wordA\|wordB".
#         don't need quote for "and" regex searching, only need white-space.
#         use -v for inverting match
#         select items like 3-5 7 11 15-20, -2 6- ,  2  - 7  8
#         search narrowly until only one chosen or all chosen
#         press 00 to select all items
#         ex) radio "sia\|live\|tv" cam "mango\|full"
#             radio sia -v lsd : include "sia" but not "lsd"
#
# Options:
#
# -a | --all
#       - displays all urls
#
# -g | --group {en|kr|jp|mv|lt|ln|lc|pl}
#       - plays a shuffled radio in a group, press 'q' to play the next.
#         this loops infinitely, press Ctrl-c repeatedly to exit.
#         ex) radio -g jp : play only the Japanese radio randomly
#
# -l | --local ["regex"]
#       - plays a shuffled local music.
#         this loops infinitely, press Ctrl-c repeatedly to exit.
#         ex) radio -l sia : play only local files with sia
#
# -x | --xxx ["regex"]
#       - plays a XXX for private
#       - asks your password for bypassing a blocked site
#
# -y | --youtube [option] [phrase]
#       - searches a phrase in youtube and plays the urls
#       - if no option and no phrase, display the cached phrases
#       - use alias : alias yt='radio -y', then yt battlestar galactica
#       - options
#         -d : delete the cached phrase
#         -u : update the cached phrase
#         -c : only search in the cached phrases
#
# -t | --test
#       - tests all radios whether work or not.
#         If failed, it logs on the file named report.
#
# -e | --edit
#       - edit this script.
#
# -h | --help
#       - prints this help.



### TODO
#
# add more favorite urls
# local play_all loop error
# variables naming



# set -u # avoid a undeclared variable

garg=( "$@" )
garg0="$0"
garg1="$1"
garg2="$2"
PROGNAME="${garg0##*/}"
BASH_VERSION='5.0.18(1)-release'
VERSION=0.1
PS3='
# 00 for all
choose : '
PLAYER=mpv
LOCAL_VIDEO_DIR=/mnt/data/Videos/
LOCAL_MUSIC_DIR=/mnt/data/Music/
LOCAL_MUSIC_EXT='.*\.(mp3|flac)$'
RADIO_START_LINE='### MY RADIO URLS'
RADIO_END_LINE='### MY RADIO URLS END'
YOUTUBE_START_LINE='### MY YOUTUBE URLS'
YOUTUBE_END_LINE='### MY YOUTUBE URLS END'
LOCAL_START_LINE='### MY LOCAL MUSIC'
LOCAL_END_LINE='### MY LOCAL MUSIC END'
TEST_END_LINE='### TEST END'
SCRIPT_PATH="$(realpath "$garg0")" # test
SCRIPT_DIR="${SCRIPT_PATH%/*}"
REPORT_PATH="$SCRIPT_DIR/report"
ARR_YOUTUBE_RESULT="$SCRIPT_DIR/arr_youtube_result"
ARR_YOUTUBE_SEARCH="$SCRIPT_DIR/arr_youtube_search"
REPORT_START_LINE='### ERROR REPORT'
XXX_FILE_PATH="$SCRIPT_DIR/xxx"
NOTSODEEP_PATH="$HOME/git/notsodeep/notsodeep"
TEST_TIME=10 # sec
PERIOD_TIME=600
# basic regex for grep and sed: ‘\?’, ‘\+’, ‘\{’, ‘\|’, ‘\(’, and ‘\)’
SKIP_PATTERN='^#\?$\|^##\+\|^#[^ ]\|^#  \+'
E_IN_A_ROW=64 # for the same item in a row
E_NO_MATCH_REGEX=65 # for no match with regex
E_FAIL_DUMP_YOUTUBE=66 # for fail youtube dump



search_linenumber() {
    local arg1="$1"
    local arg2="$2"
    x=0
    if [[ -f "$arg1" ]] ; then
        while read -r line ; do
            ((x++))
            [[ $line =~ $arg2 ]] && break # unquote for regex
        done < $arg1
    else
        while read -r line ; do
            ((x++))
            [[ $line =~ $arg2 ]] && break
        done <<< $arg1
    fi
    # test_print search_linenumber $x
    return 0
}

back_trace() {
    local maxlength
    for key in ${!FUNCNAME[@]} ; do
        if (( ${#FUNCNAME[$key]} > ${maxlength:-0} )) ; then
            maxlength=${#FUNCNAME[$key]}
        fi
    done
    # printf "\n %-${maxlength}s : %5d" \
    #        LINENO ${LINENO}
    for key in ${!BASH_LINENO[@]} ; do
        printf "\n %-${maxlength}s : %5d" \
               ${FUNCNAME[$key]} ${BASH_LINENO[$key]}
    done
    printf "\n"
}

test_print() {
    local arg1="$1"
    local arg2="$2"
    local arg3="$3"
    local itemsnumber=0
    local format1='\n\e[1;38;5;40m%s item\e[0m\n'
    local format2='\n\e[1;38;5;40m%s items\e[0m\n'
    local format3='\n\e[1;38;5;220m%s\n\e[1;38;5;240m%s\e[0m'
    printf "$format3" "$arg1" "$arg2"
    if (( $arg3 )) ; then
        if (( $arg3 == 1 )) ; then
            printf "$format1" $arg3
        elif (( $arg3 > 1 )) ; then
            printf "$format2" $arg3
        else
            printf "$format1" no
        fi
    else
        [[ -n "$arg2" ]] && itemsnumber=$(wc -l <<< "$arg2")
        if (( $itemsnumber == 1 )) ; then
            printf "$format1" $itemsnumber
        elif (( $itemsnumber > 1 )) ; then
            printf "$format2" $itemsnumber
        else
            printf "$format1" no
        fi
    fi
    # back_trace
    return 0
}

playing_print() {
    local arg1="$1"
    local arg2="$2"
    local arg3="$3"
    local arg4="$4"
    local format1='\n \e[1;38;5;130m%s\e[0m\n\n'
    local format2='\n \e[1;38;5;130m%s\n \e[1;38;5;240m%s %s %s\e[0m\n\n'
    arg1=$(sed 's/^# / /' <<< "$arg1")
    if [[ "$arg1" =~ https?:/ ]] ; then
        printf "$format1" \
               "$(sed 's/http.*//' <<< $arg1)"
    elif [[ "$arg1" =~ /$ ]] ; then
        printf "$format1" \
               "$arg1"
    elif [[ "$arg1" =~ /mnt/ ]] ; then
        printf "$format1" \
               "$(sed 's/\/mnt\/.*//' <<< $arg1)"
    else
        # for youtube_search
        if [[ $arg2 =~ ^[0-9]{8}$ && $arg3 =~ [0-9]+ && $arg4 =~ [0-9.]+ ]]
        then
            printf "$format2" \
                   "$arg1" \
                   "date: $arg2" \
                   "| count: $arg3" \
                   "| rating: $arg4"
        else
            printf "$format1" \
                   "$arg1"
        fi
    fi
    return 0
}

make_namelist() {
    # grep 'and' option
    local arg1="$1"
    local reverse=
    if [[ -n $REPLY ]] ; then
        readarray -t array_namelist <<< "${REPLY/ /$'\n'}"
    else
        array_namelist=( "${garg[@]}" ) # need double quotes like 'lsd sia'
    fi
    for line in "${array_namelist[@]}" ; do
        if [[ -z $grepnames ]] ; then
            # test_print line1 "$line"
            [[ $line =~ ^-+[a-z]+ ]] && continue
            grepnames=$(grep -i "$line" <<< "$arg1")
        else
            # test_print line2 "$line"
            if [[ $line == -v ]] ; then
                reverse=v
                continue
            fi
            grepnames=$(grep -i$reverse "$line" <<< "$grepnames")
            [[ -n $reverse ]] && reverse=
        fi
    done
    if [[ -z $grepnames ]] ; then
        printf '\n \e[1;31m%s\e[0m\n\n' \
               'No match with regex'
        exit 65
    fi
    return 0
}

remove_parts() {
    local arg1="$1"
    if [[ "$arg1" =~  https?:// ]] ; then
        grepnames=$(sed 's/ http.*//' <<< "$arg1")
    elif [[ "$arg1" =~ ^/mnt/ ]] ; then
        grepnames=$(sed 's/.*\/Music\///g'<<< "$arg1" )
    elif [[ "$arg1" =~  /mnt/ ]] ; then
        grepnames=$(sed 's/\/mnt\/.*//' <<< "$arg1")
    elif [[ "$arg1" =~  /$ ]] ; then
        grepnames="$arg1"
    fi
    return 0
}

print_shufflelist() {
    local arg1="$1"
    local print_name print_names
    for line in "$arg1" ; do
        if [[ $line =~  https?:// ]] ; then
            print_name=$(sed 's/ http.*//' <<< $line)
        elif [[ $line =~ ^/mnt/ ]] ; then
            print_name=$(sed 's/.*\/Music\///'<<< $line)
        elif [[ $line =~  /mnt/ ]] ; then
            print_name=$(sed 's/\/mnt\/.*//' <<< $line)
        else
            print_name="$line"
        fi
        print_names+=${print_names:+\n}$(sed 's/^# //' <<< $print_name)
    done
    test_print shufflelist "$print_names"
    return 0
}

shuffle_list() {
    # all items must be selected only once for one-cycle
    local arg1="$1"
    local firstshuffle
    if [[ -z $shufflelist ]] ; then
        print_shufflelist "$arg1"
        # [[ -z $arg1 ]] && exit 1
        firstshuffle=$(shuf -n 1 <<< "$arg1")
        # avoid selecting the same item in a row
        if [[ $firstshuffle == $lastshuffle ]] ; then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   'continue'
            return $E_IN_A_ROW
        else
            shufflelist=$(grep -vF "$firstshuffle" <<< "$arg1") # needed -F
            shuffleradio="$firstshuffle"
        fi
    else
        print_shufflelist "$shufflelist"
        lastshuffle=$(shuf -n 1 <<< "$shufflelist")
        shufflelist=$(grep -vF "$lastshuffle" <<< "$shufflelist")
        shuffleradio="$lastshuffle"
    fi
    # eval "$2=\$arg2" # bash special form for returning a string
    return 0
}

play() {
    local arg1="$1"
    local partline namepart optionpart lastbgpid
    local sed_pattern1 sed_pattern2
    local playing_date playing_view_count playing_average_rating playing_title
    # test_print arg1 "$arg1"
    ((count++))
    # test_print count "$count"
    if [[ $arg1 =~  https?:// ]] ; then
        partline=${arg1/*http/http}
    elif [[ $arg1 =~ /$ ]] ; then
        partline="$LOCAL_MUSIC_DIR"$(sed 's/^# //' <<< "$arg1")
    elif [[ $arg1 =~ ^/mnt/ ]] ; then
        partline="$arg1"
    elif [[ $arg1 =~  /mnt/ ]] ; then
        partline=${arg1/*mnt//mnt}
    else
        printf '\n \e[1;31m%s\e[0m\n\n' \
               'Something is wrong!'
        back_trace
        exit 1
    fi

    remove_parts "$arg1"

    if [[ ${FUNCNAME[@]} =~ youtube_search ]] ; then
        sed_pattern1='s/^[0-9]\{8\} \([0-9]\+\) .*/\1/'
        sed_pattern2='s/^[0-9]\{8\} [0-9]\+ \([0-9.]\+\) .*/\1/'
        playing_date=$(grep -o '^[0-9]\{8\}' <<< $grepnames)
        playing_view_count=$(sed "$sed_pattern1" <<< $grepnames)
        playing_average_rating=$(sed "$sed_pattern2" <<< $grepnames)
        playing_title=${grepnames#*$playing_average_rating }
        playing_print "$playing_title" \
                      $playing_date \
                      $playing_view_count \
                      $playing_average_rating
    else
        playing_print "$grepnames"
    fi

    if [[ $partline =~  --[a-z]+ ]] ; then
        # test_print partline "$partline"
        namepart=${partline%% --*} # need space for trailing
        # test_print namepart "$namepart"
        optionpart=${partline#"$namepart"}
        $PLAYER "$namepart" $optionpart & # don't quote rest options
    else
        $PLAYER "$partline" &
    fi
    lastbgpid=$!
    wait $lastbgpid
    # sleep 1
    count=0
    partlinelist=
    return 0
}

play_radio() {
    while true ; do
        radiolist=$(grep -v "$SKIP_PATTERN" <<< $radiolist)
        shuffle_list "$radiolist"
        (( $? == $E_IN_A_ROW )) && continue
        play "$shuffleradio"
    done
    return 0
}

show_all(){
    radio .
    return 0
}

play_group() {
    x=0
    while read -r line ; do
        ((x++))
        test_print urllist $urllist
        test_print x $x
        sleep 1
        case "$garg2" in
            en | english)
                [[ $line =~ ^'## English Radio' ]] && break ;;
            kr | korean)
                [[ $line =~ ^'## Korean Radio' ]] && break ;;
            jp | japanese)
                [[ $line =~ ^'## Japanese Radio' ]] && break ;;
            mv | musicvideo)
                [[ $line =~ ^'## Music Video' ]] && break ;;
            lt | livetv)
                [[ $line =~ ^'## Live TV' ]] && break ;;
            ln | livenews)
                [[ $line =~ ^'## Live News' ]] && break ;;
            lc | livecam)
                [[ $line =~ ^'## Live Camera' ]] && break ;;
            pl | playlist)
                [[ $line =~ ^'## Play List' ]] && break ;;
            *)
                printf '\n \e[1;34m%s\e[1;31m%s \e[1;34m%s\e[0m\n' \
                       'There is no ' \
                       "'$garg2'" \
                       'group.'
                printf '\n %s' \
                       'Usage: radio -g {en|kr|jp|mv|lt|ln|lc|pl}'
                printf '\n %s' \
                       'en - English Radio'
                printf '\n %s' \
                       'kr - Korean Radio'
                printf '\n %s' \
                       'jp - Japanese Radio'
                printf '\n %s' \
                       'mv - Music Video'
                printf '\n %s' \
                       'lt - Live TV'
                printf '\n %s' \
                       'ln - Live News'
                printf '\n %s' \
                       'lc - Live Camera'
                printf '\n %s\n' \
                       'pl - Play List'
                # back_trace
                exit 2
        esac
    done <<< "$urllist"
    # test_print x $x
    grouplist=$(tail -n +$((x+2)) <<< $urllist)
    search_linenumber "$grouplist" "^##+"
    grouplist=$(head -n $((x-2)) <<< $grouplist)
    while true ; do
        grouplist=$(grep -v "$SKIP_PATTERN" <<< $grouplist)
        shuffle_list "$grouplist"
        (( $? == $E_IN_A_ROW )) && continue
        play "$shuffleradio"
        sleep 1
    done
    return 0
}

select_one_grepname() {
    namescount=$(wc -l <<< $grepnames)
    (( $namescount > 1 )) && select_list "$arg1" "$grepnames"
}

select_play() {
    local shuffle_line _lines n_chars min_char
    # test_print arg2 "$arg1"
    while true ; do
        shuffle_list "$grepnames"
        (( $? == $E_IN_A_ROW )) && continue
        shuffle_line=$(grep -iF "$shuffleradio" <<< $arg1)
        _lines=$(wc -l <<< $shuffle_line) # need remove extra line
        if (( $_lines > 1 )) ; then
            for line in "$shuffle_line" ; do
                n_chars=$(wc -c <<< $line)
                if (( $n_chars <= ${min_chars:-$n_chars} )) ; then
                    min_chars=$n_chars
                    shuffle_line="$line"
                fi
            done
        fi
        play "$shuffle_line"
        # sleep 1
    done
    return 0
}

select_all() {
    printf '\n %s\n' \
           'You chose all items.'
    select_play
    return 0
}

select_sed() {
    printf '\n %s\n' \
           'You selected multiple items with - and numbers.'
    # transform for sed
    #  3-5 7 11 15-20         --> 3,5p;7p;11p;15,20p
    #    3     -5  7  8-   9  --> 3,5p;7p;8,9p
    #   -  2     6  -         --> 1,2p;6,{endline}p
    REPLY=$(sed 's/^ \+\| \+$//g' <<< $REPLY \
                | sed 's/ \+/ /g' \
                | sed 's/ -\|- /-/g' \
                | sed 's/ /p;/g' \
                | sed 's/-/,/g' \
                | sed 's/^,/1,/' \
                | sed "s/,$/,$grepcount/" \
                | sed 's/$/p/')
    # test_print REPLY "$REPLY"
    grepnames=$(sed -n "$REPLY" <<< $grepnames)
    select_one_grepname
    select_play
    return 0
}

select_regex() {
    printf '\n %s\n' \
           'You selected items with regex.'
    make_namelist "$grepnames"
    # test_print grepnames "$grepnames"
    select_one_grepname
    select_play
    return 0
}

select_list() {
    local arg1="$1"
    local arg2="$2"
    local pattern1="[0-9]*[-\ ]+[0-9]*"
    local pattern2="[^0-9\ -]+"
    grepcount=$(grep -ic .  <<< $grepnames)
    if (( $grepcount == 1 )) ; then
        # grep '-F' for only string like "[live] tv"
        grepline=$(grep -iF "$arg2" <<< $arg1)
        play "$grepline"
    elif (( $grepcount > 1 )) ; then
        remove_parts "$arg2"
        # test_print grepnames "$grepnames"
        readarray -t arr_names <<< $grepnames
        printf '\n' # needed
        select line in "${arr_names[@]}" ; do
            if [[ $REPLY =~ ^00$ ]] ; then
                select_all
                exit 0
            elif [[ $REPLY =~ $pattern1 && ! $REPLY =~ $pattern2 ]] ; then
                select_sed
                exit 0
            elif [[ $REPLY =~ [^0-9] ]] ; then
                select_regex
                exit 0
            elif [[ -n $line ]] ; then
                selected="$line"
                break
            else
                printf '\n \e[1;31m%s\e[0m\n' \
                       'Something is wrong!'
                back_trace
                exit 1
            fi
        done

        grepline=$(grep -iF "$selected" <<< $arg1)
        play "$grepline"
        exit 0
    fi
}

play_local() {
    search_linenumber "$urllist" "^$LOCAL_START_LINE"
    locallist=$(tail -n +$((x+2)) <<< $urllist)
    search_linenumber "$locallist" "^##+"
    locallist=$(head -n $((x-2)) <<< $locallist)
    if [[ -z $garg2 ]] ; then
        while true ; do
            locallist=$(grep -v "$SKIP_PATTERN" <<< $locallist)
            shuffle_list "$locallist"
            (( $? == $E_IN_A_ROW )) && continue
            play "$shuffleradio"
            # sleep 1
        done
    else
        shopt -s globstar
        for file in "$LOCAL_MUSIC_DIR"**/* ; do
            if [[ $file =~ $LOCAL_MUSIC_EXT ]] ; then
                localoneline+=( "$file" ) # need " "
            fi
        done
        locallist=$(printf '%s\n' \
                           "${localoneline[@]}")
        # test_print locallist "$locallist"
        make_namelist "$locallist"
        select_list "$locallist" "$grepnames"
    fi
    return 0
}

test_items() {
    search_linenumber "$urllist" "^$TEST_END_LINE"
    testlist=$(head -n +$x <<< "$urllist")
    cat > "$REPORT_PATH" <<< $REPORT_START_LINE
    while read -r line ; do
        (( $(grep -c "$SKIP_PATTERN" <<< $line) )) &&continue
        playing_print "$line"
        $PLAYER $(sed 's/.*http/http/' <<< $line) &
        lastbgpid=$!
        sleep $TEST_TIME
        if (( $(ps aux | grep -c $lastbgpid) == 1 )) ; then
            echo "$line" >> "$REPORT_PATH"
        else
            kill $lastbgpid
        fi
        sleep 1
    done <<< $testlist
    printf '\n %s\n' \
           "$(cat $REPORT_PATH)"
    return 0
}

edit_this() {
    $EDITOR $HOME/git/radio/radio
    return 0
}

help_usage() {
    search_linenumber "$garg0" '^# Usage'
    helplist=$(tail -n +$((x-3)) "$garg0")
    search_linenumber "$helplist" ^$
    helplist=$(head -n $x <<< $helplist)
    printf '\n %s\n' \
           "$(sed 's/#\+//' <<< $helplist)" # need " "
    return 0
}

bypass_site() { # bypass for the blocked sites
    if (( ! $(ps -A | grep -c notsodeep) )) ; then
        sudo iptables \
             -A INPUT \
             -p tcp \
             --tcp-flags SYN,ACK SYN,ACK \
             --sport 443 \
             -j NFQUEUE \
             --queue-num 200 \
             --queue-bypass
        sudo "$NOTSODEEP_PATH" &
    fi
}

play_xxx() { # private
    bypass_site
    xxxlist="$XXX_FILE_PATH"
    # test_print xxxlist "$xxxlist"
    make_namelist "$xxxlist"
    grepnames=$(grep -v "$SKIP_PATTERN" <<< $grepnames | sed 's/^# //')
    # test_print grepnames "$grepnames"
    select_list "$xxxlist" "$grepnames"
    # sudo pkill notsodeep
    return 0
}

youtube_search() { # uses youtube-dl
    local s_phrase="${garg[@]:1}"
    local s_limit=100 # 8 secs for 10, so need cache
    local max_cache=1000
    local display_c_Phrase_limit=100
    local try_dump_limit=100
    local yt_prefix="https://www.youtube.com/watch?v="
    local result r_list
    local r_date r_view_count r_average_rating r_title r_url
    local arr_title arr_url
    local c_phrase s_rate d_phrase d_matched u_matched
    local lastline lastdate
    local i j c
    if [[ -e $ARR_YOUTUBE_SEARCH ]] ; then
        source "$ARR_YOUTUBE_SEARCH"
    else
        declare -A arr_search
    fi
    if [[ -e $ARR_YOUTUBE_RESULT ]] ; then
        source "$ARR_YOUTUBE_RESULT"
    else
        declare -A arr_result
    fi
    if [[ -z $garg2 ]] ; then
        for line in "${!arr_result[@]}" ; do
            ((j++))
            if (( j > $display_c_Phrase_limit )) ; then
                c_phrase+="${c_phrase:+ }'$line' ..."
                break
            fi
            c_phrase+="${c_phrase:+ }'$line'"
        done
        test_print c_phrase "$c_phrase" ${#arr_result[@]}
        exit 2
    elif [[ $garg2 == -d ]] ; then  # -d delete the cached_phrase
        d_phrase="${garg[@]:2}"
        for line in "${!arr_result[@]}" ; do
            if [[ $line == $d_phrase ]] ; then
                d_matched=1
                unset arr_result["$d_phrase"]
                unset arr_search["$d_phrase"]
                declare -p arr_search > "$ARR_YOUTUBE_SEARCH"
                declare -p arr_result > "$ARR_YOUTUBE_RESULT"
                break
            fi
        done
        if (( $d_matched )) ; then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   "success for deletion with '$d_phrase'"
            exit 0
        else
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   "not matched with '$d_phrase'"
            exit 1
        fi
    elif [[ $garg2 == -c ]] ; then  # -c search in the c_phrase
        s_phrase="${garg[@]:2}"
        for line in "${!arr_result[@]}" ; do
            if [[ $line == $s_phrase ]] ; then
                result="${arr_result[$line]}"
                s_rate=$(( ${arr_search["$s_phrase"]} + 1 ))
                arr_search["$s_phrase"]=$s_rate
                break
            fi
        done
        if [[ -z $result ]] ; then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   'There is no cached_phrase.'
            exit 2
        fi
    elif [[ $garg2 == -u ]] ; then # -u update the cached_phrase
        s_phrase="${garg[@]:2}"
        for line in "${!arr_result[@]}" ; do
            if [[ $line == $s_phrase ]] ; then
                s_rate=$(( ${arr_search["$s_phrase"]} + 1 ))
                arr_search["$s_phrase"]=$s_rate
                u_matched=1
                break
            fi
        done
        if (( ! $u_matched )) ; then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   "not matched with '$update_phrase'"
            exit 1
        fi
    else
        for search in "${!arr_result[@]}" ; do
            if [[ $search == $s_phrase ]] ; then
                result="${arr_result["$search"]}"
                s_rate=$(( ${arr_search["$s_phrase"]} + 1 ))
                arr_search["$s_phrase"]=$s_rate
                break
            fi
        done
    fi
    if [[ -z $result ]] ; then
        while [[ -z $result ]] ; do # json-dump often fails
            ((c++))
            if (( $c > $try_dump_limit )) ; then
                printf '\n \e[1;31m%s\e[0m\n' \
                       "Fail to dump. try later!"
                exit 66
            fi
            printf '\n\e[1;38;5;90m %s\e[0m%s\n' \
                   "'${c}'" \
                   "th trying ..."
            result=$(youtube-dl -j ytsearch${s_limit}:"$s_phrase" 2>/dev/null)
        done
        result=$(printf %b "$result") # Unicode-to-utf8, need %b
        if (( ${#arr_result[@]} >= $max_cache )) ; then
            for key in "${!arr_search[@]}" ; do
                if (( ${arr_search["$key"]} <= ${min_rate:-10} )) ; then
                    min_rate=${arr_search["$key"]}
                    min_key="$key"
                fi
            done
            unset arr_result["$min_key"]
            unset arr_search["$min_key"]
            printf '\n \e[1;31m%s - %s\e[0m\n' \
                   "'${min_key}' has been removed" \
                   "$min_rate rated."
        fi
        arr_result+=(["$s_phrase"]="$result")
        if [[ -n ${arr_search["$s_phrase"]} ]] ; then
            arr_search+=(["$s_phrase"]=${arr_search["$s_phrase"]})
        else
            arr_search+=(["$s_phrase"]=1)
        fi
    fi
    r_date=$(grep -oP '"upload_date": ".*?",' <<< $result \
                       | sed 's/^".*": "//' \
                       | sed 's/",$//')
    r_title=$(grep -oP '"title": ".*?",' <<< $result \
                       | sed 's/^".*": "//' \
                       | sed 's/",$//')
    r_url=$(grep -oP '"webpage_url": ".*?",' <<< $result \
                     | sed 's/^".*": "//' \
                     | sed 's/",$//')
    r_view_count=$(grep -oP '"view_count": [0-9]+,' <<< $result \
                             | sed 's/^".*": //' \
                             | sed 's/,$//')
    r_average_rating=$(grep -oP '"average_rating": [0-9.]+,' <<< $result \
                             | sed 's/^".*": //' \
                             | sed 's/,$//')
    readarray -t arr_date <<< $r_date
    readarray -t arr_title <<< $r_title
    readarray -t arr_url <<< $r_url
    readarray -t arr_view_count <<< $r_view_count
    readarray -t arr_average_rating <<< $r_average_rating
    for title in "${arr_title[@]}" ; do
        r_list+=$(printf "${r_list:+\n}%s %s %s %s %s" \
                              ${arr_date[$i]} \
                              ${arr_view_count[$i]} \
                              ${arr_average_rating[$i]} \
                              "$title" \
                              "${arr_url[$i]}")
        ((i++))
    done
    r_list=$(sort <<< $r_list)
    lastdate=$(tail -n 1 <<< $r_list | grep -o '^[0-9]\{8\}')
    grepnames=$(sed 's/^[0-9]\{8\} [0-9]\+ [0-9.]\+ //' <<< $r_list \
                    | sed 's/ http.*//')
    # test_print r_list "$r_list"
    # test_print grepnames "$grepnames"
    declare -p arr_search > "$ARR_YOUTUBE_SEARCH"
    declare -p arr_result > "$ARR_YOUTUBE_RESULT"
    PS3="
Last uploaded: $lastdate
choose : "
    select_list "$r_list" "$grepnames"
    return 0
}



search_linenumber "$garg0" "^$RADIO_START_LINE"
urllist=$(tail -n +$((x+2)) "$garg0")
# test_print urllist "$urllist"
search_linenumber "$urllist" "^$RADIO_END_LINE"
radiolist=$(head -n +$((x-2)) <<< $urllist)
# test_print radiolist "$radiolist"

# case uses * ? [...] | as matching pattern
# case doesn't use regex and variables basically
# if you need those, use [[ ... =~ ... ]]
case "$garg1" in
    "")
        play_radio && exit 0 ;;
    -a|--all)
        show_all && exit 0 ;;
    -g|--group)
        play_group && exit 0 ;;
    -l|--local)
        play_local && exit 0 ;;
    -t|--test)
        test_items && exit 0 ;;
    -e|--edit)
        edit_this && exit 0 ;;
    -h|--help)
        help_usage && exit 0 ;;
    -x|--xxx)
        play_xxx && exit 0 ;;
    -y|--youtube)
      youtube_search && exit 0 ;;
    *)
        make_namelist "$urllist" ;;
esac

grepnames=$(grep -v "$SKIP_PATTERN" <<< $grepnames | sed 's/^# //')
# test_print grepnames "$grepnames"
select_list "$urllist" "$grepnames"



# ### - source
# ##  - group
# #   - url

### MY RADIO URLS - from a latte applet in KDE.
#
## English Radio
#
# BBC Radio London 94.9 FM http://bbcmedia.ic.llnwd.net/stream/bbcmedia_lrldn_mf_p
# NPR 24h Program Stream https://npr-ice.streamguys1.com/live.mp3
# CNN HLN http://tunein.streamguys1.com/cnnhln
# Fox News Radio https://streaming-ent.shoutcast.com/foxnews
# KWSU 1250 Northwest Public Radio NPR News - Pullman, WA http://streams.nwpr.org:8000/NWPRNEWS
# WNPR 90.5 Connecticut Public Radio - Meriden, CT http://16113.live.streamtheworld.com/WNPRFM_SC
# 90.5 WESA Pittsburgh's NPR New Station https://17273.live.streamtheworld.com:443/WESAFM.mp3
#
## Korean Radio
#
# SBS 러브 FM-SBS 라디오 http://slive.ytn.co.kr:1935/live/fmlive_0624_1.sdp/playlist.m3u8
# gukak http://mgugaklive.nowcdn.co.kr/gugakradio/gugakradio.stream/playlist.m3u8
# FM 95.1 TBS fm http://58.234.158.60:1935/fmlive/myStream/playlist.m3u8
#
## Japanese Radio
#
# KBS World Japanese Radio http://101.79.244.199:1935/cocotv/_definst_/CH00007/playlist.m3u8
# Kishiwada Radio http://61.89.201.27:8000/radikishi.mp3
# Kyoto Living FM (京都リビング FM/きょうと りびんぐ FM) http://musicbird.leanstream.co/JCB104-MP3
# FmHaro!76.1（エフエムハロー!） http://musicbird.leanstream.co/JCB034-MP3
# FM Fujiyama (FMふじやま, JOZZ3CA-FM, 77.6 MHz, Fujikawaguchiko, Yamanashi) http://musicbird.leanstream.co/JCB026-MP3
# Shuunan FM (しゅうなんFM, JOZZ8AJ-FM, 78.4 MHz, Shūnan, Yamaguchi) http://musicbird.leanstream.co/JCB085-MP3
# Air Tesshi (Airてっし, JOZZ1AU-FM, 78.8 MHz, Nayoro, Hokkaido) http://musicbird.leanstream.co/JCB003-MP3
# Umeda FM Be Happy! (ウメダFM Be Happy! 789/エフエムキタ, JOZZ7AK-FM, 78.9MHz, Kita-ku, Osaka) http://musicbird.leanstream.co/JCB068-MP3
# Happy FM Itami (ハッピーエフエムいたみ, JOZZ7AJ-FM, 79.4 MHz, Itami, Hyōgo) http://musicbird.leanstream.co/JCB070-MP3
# FM Yame (FM八女, JOZZ0BY-FM, 80.1 MHz, Yame, Fukuoka) http://musicbird.leanstream.co/JCB086-MP3
# FM Hanako (JOZZ7AA-FM, 82.4 MHz, Moriguchi City, Osaka) http://musicbird.leanstream.co/JCB069-MP3
# Kamakura FM 82.8 (かまくらFM, JOZZ3AF-FM, 82.8 MHz, Kamakura, Kanagawa) http://musicbird.leanstream.co/JCB016-MP3?args=tunein_02
# Ichikawa Urara FM (市川うららFM. JOZZ3AY-FM, 83.0 MHz, Ichikawa, Chiba) http://musicbird.leanstream.co/JCB020-MP3
# Humming FM Takarazuka (ハミングFM宝塚, JOZZ7AT-FM, 83.5 MHz, Takarazuka, Hyōgo) http://musicbird.leanstream.co/JCB071-MP3
# 84.3 FM Edogawa (FMえどがわ, JOZZ3AS-FM, Edogawa City, Tokyo) http://musicbird.leanstream.co/JCB032-MP3
# Shonan Magic Wave (湘南マジックウェィブ, JOZZ3CI-FM, 85.6 MHz, Ōiso, Kanagawa) http://musicbird.leanstream.co/JCB018-MP3
# FM Hana (FMはな, JOZZ1AZ-FM, 87.0 MHz, Nakashibetsu, Hokkaido) http://musicbird.leanstream.co/JCB001-MP3
# Banana FM (バナナエフエム, JOZZ7BE-FM, 87.7 MHz, Wakayama City) http://musicbird.leanstream.co/JCB075-MP3
#
### MY RADIO URLS END
#
### MY YOUTUBE URLS - need a youtube-dl to play a url.
#
## Music Video
#
# Дария «Нуки» Ставрович «Zombie» - Слепые прослушивания – Голос – Сезон 5 https://www.youtube.com/watch?v=pLN-EnS_QLA
# Дария Ставрович «Круги на воде» - Нокауты - Голос - Сезон 5 https://www.youtube.com/watch?v=AW3EJiRD0ho
# Дария Ставрович «Chandelier» - Полуфинал - Голос - Сезон 5 https://www.youtube.com/watch?v=ltV1yoeIoPM
# Sting - Shape of My Heart (Leon) https://www.youtube.com/watch?v=QK-Z1K67uaA
# What's up - EXCELENTE COVER!!! https://www.youtube.com/watch?v=1NNE0b55AoM
# nakashima mika - 僕が死のうと思ったのは (내가 죽으려고 마음먹었던 것은) https://www.youtube.com/watch?v=C6st9z_iaao
# nakashima mika - 中島美嘉『雪の華』 Music Video https://www.youtube.com/watch?v=oIoaIlPpIcA
# Amazarash(아마자라시 - 한글자막)  - 내가 죽으려고 생각한 것은【acoustic live ver】 https://www.youtube.com/watch?v=6SNscvxLP4E
# Sia - Big Girls Cry (Official Video) https://www.youtube.com/watch?v=4NhKWZpkw1Q
# Sia - The Greatest https://www.youtube.com/watch?v=GKSRyLdjsPA
# Sia - Together (from the motion picture Music) https://www.youtube.com/watch?v=vnfGni4_RlI
# Sia - Alive https://www.youtube.com/watch?v=t2NgsJrrAyM
# Sia - Unstoppable https://www.youtube.com/watch?v=H3evCDEXp4I
# Sia - Chandelier (Official Music Video) https://www.youtube.com/watch?v=2vjPBrBU-TM
# Sia - Elastic Heart feat. Shia LaBeouf & Maddie Ziegler (Official Video) https://www.youtube.com/watch?v=KWZGAExj-es
# LSD - Thunderclouds (Official Video) ft. Labrinth, Sia, Diplo https://www.youtube.com/watch?v=mILth-K6KvM
# LSD - No New Friends (Official Video) ft. Labrinth, Sia, Diplo https://www.youtube.com/watch?v=kkUIdK9eaIk
# LSD - Audio (Official Video) ft. Sia, Diplo, Labrinth https://www.youtube.com/watch?v=tjA7nAHOAww
# Queen - Love of My Life https://www.youtube.com/watch?v=v3xwCkhmies
# Queen - Love Of My Life (Live, 1979) https://www.youtube.com/watch?v=Idj__EDPCKk
# Queen - Somebody To Love - HD Live - 1981 Montreal https://www.youtube.com/watch?v=aA2IRoPFIn0
# Queen - Bohemian Rhapsody (Live at Rock Montreal, 1981) [HD] https://www.youtube.com/watch?v=N0dbGGvsjf8
# radiohead - Creep https://www.youtube.com/watch?v=XFkzRNyygfk
# Radiohead - Creep (Best Live Performance) https://www.youtube.com/watch?v=k3_RU30tEIE
# The Cranberries - Zombie 1999 Live Video https://www.youtube.com/watch?v=8MuhFxaT7zo
# This sadness of this darkness https://www.youtube.com/watch?v=9_FSnSQ82T0
# 도시의 그림자 - 이 어둠의 이 슬픔 (1986) https://www.youtube.com/watch?v=BLPQySIh2Jk --start=00:12 --end=04:16 --volume=180
# 도시의 그림자(Shadow of City) - 이 어둠의 이 슬픔 (1986) https://www.youtube.com/watch?v=LW14PKtNvws --start=#3 --end=#4
# 노래얼_김옥희_이 어둠의 이 슬픔_고대 85학번 입학 30주년 기념 모교방문 축제 https://www.youtube.com/watch?v=cmNekU_svwY&list=RDcmNekU_svwY
# 강지민 - 이 어둠의 이 슬픔 (도시의 그림자) https://www.youtube.com/watch?v=lg6IKzPdoes --volume=70
# 심수봉 - 백만송이 장미 (1997년 6월 1일 이소라의 프로포즈) https://www.youtube.com/watch?v=z3Lkc8fEsww
# 떼창 할 수 밖에 없는 심수봉 - 남자는 배 여자는 항구♬ [유희열의 스케치북/You Heeyeol's Sketchbook] 20191220 https://www.youtube.com/watch?v=uRU58V_59jk
# 블랙홀(Black Hole) - 깊은 밤의 서정곡 https://www.youtube.com/watch?v=946hIajM-Hc
#===== local music video file
# Frozen2 - Into the Unknown /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=#5 --end=20:06
# Frozen2 - Show Yourself /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=#15 --end=1:07:07
# Frozen2 - The Next Right Thing /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=#17 --end=1:17:24
# Frozen2 - Some things never change /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=09:13 --end=12:38
# Moana - how far I'll go /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=#4 --end=18:45
# Moana - I am Moana /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=1:20:54 --end=1:22:25
# Moana - Where you are /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=07:45 --end=10:10
# Moana - You're welcome /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=38:20 --end=41:04
# Moana - shine /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=1:01:28 --end=1:04:42
# Moana - Tulou Tagaoa /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=23:50 --end=26:00
# Les.Miserables 2012 - Look down /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=55 --end=5:26
# Les.Miserables 2012 - I Dreamed A Dream /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=27:17 --end=31:51
# Les.Miserables 2012 - The Confrontation /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=43:20 --end=45:10
# Les.Miserables 2012 - Paris / Look Down /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=1:06:42 --end=1:09:36
# Les.Miserables 2012 - On My Own /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=1:28:52 --end=1:32:00
# Les.Miserables 2012 - Do You Hear The People Sing? /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=1:35:35 --end=1:37:44
# Les.Miserables 2012 - Epilogue /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=2:27:55 --end=2:29:40
#===== ani-opening
# Ghost in the shell 1995 - Original Soundtrack /mnt/data/Videos/Ghost.in.the.Shell.1995.JAPANESE.1080p.US.BluRay.H264.AAC-VXT.mp4 --start=03:56 --end=08:20
# Neon Genesis Evangelion (A Cruel Angel's Thesis) Anime Intro Opening Theme HD BluRay (Best Quality) https://www.youtube.com/watch?v=nU21rCWkuJw
# Read or Die Opening https://www.youtube.com/watch?v=jsBpraFks0Y
#
## Live TV
#
# 正在直播：CCTV中文国际 https://www.youtube.com/watch?v=vCDDYb_M2B4
# franceinfo - DIRECT TV - actualité france et monde, interviews, documentaires et analyses https://www.youtube.c
# Tele1 TV | Canlı Yayın ᴴᴰ https://www.youtube.com/watch?v=TDy-nmXZNQM
# Adom TV Live https://www.youtube.com/watch?v=LIb1ADo0pGs
#
## Live News
#
# LIVE 언제, 어디서나 KBS 24시뉴스 https://www.youtube.com/watch?v=cUaptEjecPE
# YTN LIVE 대한민국 24시간 뉴스채널 https://www.youtube.com/watch?v=U_sYIKWhJvk
# live 연합뉴스TV https://www.youtube.com/watch?v=0GN8t2u3flc
# CNA 24/7 LIVE https://www.youtube.com/watch?v=XWq5kBlakcQ
# ANNnewsCH https://www.youtube.com/watch?v=coYw-eVU0Ks
# Taiwan Formosa live news HD https://www.youtube.com/watch?v=XxJKnDLYZz4
# Taiwan EBC 24h live news https://www.youtube.com/watch?v=RaIJ767Bj_M
# Watch NBC News NOW Live https://www.youtube.com/watch?v=6hRk_zPTN1c
# NBC2 Live Stream https://www.youtube.com/watch?v=tPeUHECNLKs
# Watch The Latest News Headlines and Live Events: ABC News Live https://www.youtube.com/watch?v=w_Ma8oQLmSM
# Al Jazeera English | Live https://www.youtube.com/watch?v=_dsWF2prkR8
# Watch Sky News live https://www.youtube.com/watch?v=9Auq9mYxFEE
# Euronews English Live https://www.youtube.com/watch?v=4MHhTZaGt2w
# FRANCE 24 English – LIVE – International Breaking News & Top stories - 24/7 stream https://www.youtube.com/watch?v=FUnJzFT2i84
# LIVE: Puthiya Thalaimurai Live News | Tamil News | Live Tamil News | Ayodhya Ram temple | Sushant https://www.youtube.com/watch?v=AyOCx_DHXJU
# OTV Live 24x7 | Latest News Updates | Coronavirus(COVID-19) News | Unlock 3.0 Updates | Odisha TV https://www.youtube.com/watch?v=Axu-FoqBIXY
# Sakshi TV LIVE | Today 'Telugu News' LIVE  https://www.youtube.com/watch?v=8McTsOqeueE
# Manorama News LIVE TV https://www.youtube.com/watch?v=jjH6v95z3Nw
# Watch SAMAA TV's News LIVE STREAM 24/7 | Full Pakistan coverage https://www.youtube.com/watch?v=vBjv7ZkRzig
# LIVE STREAMING KOMPAS TV 24/7 https://www.youtube.com/watch?v=gIB2egm7tL8
# NETTV LIVE 2020 https://www.youtube.com/watch?v=WZ83bBwWZQY
# Channels Television Live https://www.youtube.com/watch?v=MSQhwpYQbtQ
# TGRT Haber TV Canlı Yayın ᴴᴰ https://www.youtube.com/watch?v=5J8uR3mxq80
# Habertürk TV Canlı Yayın ᴴᴰ https://www.youtube.com/watch?v=deKH0pQ7-rg
#
## Live Camera - often change url address or off the camera
#
# 남산서울타워 파노라마 LIVE https://www.youtube.com/watch?v=uVTcfjw8sBw
# 鍛冶町通りライブカメラ［ザザシティ浜松］PTZ（パンチルトズーム）https://www.youtube.com/watch?v=PvoIqPjZFyA&feature=emb_logo
# Shibuya Scramble Crossing Live Camera https://www.youtube.com/watch?v=jEhIe2SDKso
# 【LIVE CAMERA】渋谷スクランブル交差点 ライブ映像 https://www.youtube.com/watch?v=I6YANW67hQ0
# 【LIVE】Tokyo Shinjuku Live Camera 新宿 大ガード交差点【2020】https://www.youtube.com/watch?v=RQA5RcIZlAM
# Downtown Telluride Live Camera https://www.youtube.com/watch?v=Y_TLxje5Qw4
# 秋葉原ライブカメラ Akihabara live camera YouTube Live version https://www.youtube.com/watch?v=mpFAKw68Je0
# KABUKICHO TOKYO Live Stream https://www.youtube.com/watch?v=kUeDK-f2IMk
# LIVE 道後温泉本館！！正面カメラ https://www.youtube.com/watch?v=vM7_-e0gdsc
# 【ライブ配信】丸沼高原　標高1500ｍ https://www.youtube.com/watch?v=m-U577NAs_U
# WATCH NASA: Earth Viewing cameras - Earth From Space ISS feed https://www.youtube.com/watch?v=DDU-rZs-Ic4
# EarthCam Live: Times Square in 4K https://www.youtube.com/watch?v=mRe-514tGMg
# Times Square: 1560 Broadway View Live https://www.youtube.com/watch?v=4qyZLflp-sI
# Times Square: Express View Live https://www.youtube.com/watch?v=uw0lpuMSe9E&feature=emb_logo
# Las Vegas: AE View Live https://www.youtube.com/watch?v=1ZNCtDLUKHw
# Avalanche Bay Indoor Waterpark, Boyne Mountain https://www.youtube.com/watch?v=mm_fnIJ1c6Q&feature=emb_logo
# Jackson Hole Wyoming USA Town Square Live Cam - SeeJH.com https://www.youtube.com/watch?v=1EiC9bvVGnk
# White Mountains TV Live Cam: North Conway Village https://www.youtube.com/watch?v=eT7Z70L5SPo
# Webcam Lanzarote - Live Stream from the Beachbar in Costa Teguise https://www.youtube.com/watch?v=NHkrWF5HMSE
# Live Stream — Public Square, Watertown NY — Jake Johnson Properties https://www.youtube.com/watch?v=qP1y7Tdab7Y&feature=emb_logo
# Tropical Murphys 1 Live Stream From Chaweng, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=0Ns1sNoUSaY
# Tropical Murphys 2 Live Stream From Chaweng, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=wXsYOpVP-kQ
# LIVE · Thailand / Koh Phangan / Haad Rin · Full Moon Party beach (AI Camera looking for people) https://www.youtube.com/watch?v=-Fen7JP8oHI&feature=emb_logo
# LIVE · Thailand / Koh Phangan · Thong Sala center (Mandolino Pizzeria) https://www.youtube.com/watch?v=1nnt_Beuo88&feature=emb_logo
# Hush Bar Cam, Soi Green Mango, Chaweng, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=wqvStiZyVBI
# Crystal Bay Yacht Club Live Stream From Lamai, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=aJdwAUUbFL8
# Crystal Bay Live Stream From Lamai, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=AK9TkxHCbHU
# LIVE · Thailand / Koh Phangan / Haad Rin · Full Moon Party beach (Seaview Sunrise Resort) https://www.youtube.com/watch?v=9WbCh2AE_NU
# Banff, AB Canada Live Cam https://www.youtube.com/watch?v=Tpchwvyv6yU
# Grancanaria.live | Playa del Inglés - Yumbo Center - LIVE ultraHD 4K PTZ https://www.youtube.com/watch?v=cvYNX6OONW4&feature=emb_logo
# WebCam.NL | www.sportsatsea.nl - live HD PTZ camera. https://www.youtube.com/watch?v=5rkyZrQv674&feature=emb_logo
# Beach Bar live HD Webcam in Cruz Bay https://www.youtube.com/watch?v=GrZ8LL8yAqs&feature=emb_logo
# Live da Club Camping Jesolo International https://www.youtube.com/watch?v=SDIPtTeTUdA
# Live Da Jesolo Spiagge - Oro Beach https://www.youtube.com/watch?v=zE_yzuxFiMo
# Lanzarote Webcam LIVE HD Streaming from Puerto del Carmen Beach (Lanzarote,Canary Islands,Spain) https://www.youtube.com/watch?v=mpd2CHIgJ9A
# Alanya Turkey, Alanya Türkei, Аланья Турция Palmiye Beach Hotel Live Camera https://www.youtube.com/watch?v=hYAaoI2E1Pw
# The central beach of Lignano Sabbiadoro (Italy) - Spiaggia LIVE streaming HD Webcam https://www.youtube.com/watch?v=jB_ix1xoj1c
# Historical city center "Piazza Fontana" of Lignano Sabbiadoro (Italy) - LIVE streaming HD Webcam https://www.youtube.com/watch?v=3J_-o4sB2RU
# Webcam Bari Sardo - Sardegna https://www.youtube.com/watch?v=IbgPG5L-uoI
# LIVE Deerfield Beach - Beach Camera https://www.youtube.com/watch?v=-HAi_5IIAYg&feature=emb_logo
# Underwater Camera in Deerfield Beach, Florida https://www.youtube.com/watch?v=GAv4VCC41oU
# Dania Beach Pier and Beach Cam https://www.youtube.com/watch?v=bEoNVd3spEM&feature=emb_logo
# Sportovní areál - Maškova zahrada, Turnov https://www.youtube.com/watch?v=meUtwDS6fVk&feature=emb_logo
# HC Lomnice nad Popelkou https://www.youtube.com/watch?v=7AGre-USTMc
# Lomnice nad Popelkou - Koupaliště https://www.youtube.com/watch?v=MAIRHYclfyM
# Lomnice nad Popelkou - Koupaliště (kamera 2) https://www.youtube.com/watch?v=sDKNrdqMcqE
# Lomnice nad Popelkou - Husovo náměstí https://www.youtube.com/watch?v=IsJWaa_KMVc
# Lomnice nad Popelkou - TENIS - pohled ke klubovně https://www.youtube.com/watch?v=vPWxzpc0Iek
# Lomnice nad Popelkou - tour https://www.youtube.com/watch?v=qAWlaKoSqa4
# TJ Sokol Nová Ves nad Popelkou, z.s. , fotbalové hřiště https://www.youtube.com/watch?v=Bg2JXM5KcII
# Jinolice - Oborský rybník https://www.youtube.com/watch?v=t1NLP0TJwn8
# Tropical Reef Camera powered by EXPLORE.org https://www.youtube.com/watch?v=F109TZt3nRc
# "Shirahama Ohama Beach" 白浜大浜海水浴場（静岡県下田市） https://www.youtube.com/watch?v=xuP8xIbZvmo
# Frenchy’s Clearwater Beach Cam https://www.youtube.com/watch?v=fa7wCF6JL1w
# 「LIVECAMERA」　草津温泉「湯畑」湯滝前  https://www.youtube.com/watch?v=GzbPVzPnT-U
# 「LIVECAMERA 」草津温泉 西の河原・湯川LIVE https://www.youtube.com/watch?v=iPBW7BBoyIw
# 【LIVE CAMERA】飛騨高山ライブカメラ 陣屋前 /Hida-Takayama,In front of the Takayama Jinya https://www.youtube.com/watch?v=PG8kZQ2EkSQ
# 【ライブ配信】丸沼高原スキー場　標高1400m https://www.youtube.com/watch?v=YqXzpB-ardY
# 上高地河童橋ライブカメラ KAMIKOCHI KAPPA-BASHI LIVE CAMERA https://www.youtube.com/watch?v=8bZTa4CBJ2o
# 【LIVE CAMERA】長門湯本温泉ライブカメラ 恩湯（おんとう）前 https://www.youtube.com/watch?v=sgteH34KgM0
# LIVE 道後温泉本館！！冠山カメラ https://www.youtube.com/watch?v=cqjaUAloHzQ
# 【LIVE CAMERA】飛騨高山ライブカメラ 中橋/Hida-Takayama Naka-Bashi Bridge https://www.youtube.com/watch?v=4hx8Xqj0cXM
# 【LIVE】上野城ライブカメラ 桜島と鹿児島市内 ※音付き（作業用にも） / Sakurajima and Kagoshima city in Japan https://www.youtube.com/watch?v=WCzHpvAoYRY
# 【Live Stream】久里浜遠望カメラ　神奈川県横須賀市　The Sky of Yokosuka, Japan https://www.youtube.com/watch?v=L-oKanVICT8
#
## Play List - my favorite list
#
# 심수봉 노래 모음 https://www.youtube.com/watch?v=-03cg8u5fdU
# 정태춘, 박은옥 히트곡 모음 듣기ㅣ북한강에서, 촛불 https://www.youtube.com/watch?v=TuukzC2chdo
# 김광석 히트곡 모음 (고음질) https://www.youtube.com/watch?v=yxp2CGK_WWE
# 김현식 베스트 명곡 전부 모음 - 고음질 https://www.youtube.com/watch?v=Speml0pUCB4
# 해바라기 - 노래모음 베스트 20곡 https://www.youtube.com/watch?v=zGsIgF3UBpU
# 자우림 (JAURIM), 김윤아 BEST 40곡 좋은 노래모음 - [연속재생] https://www.youtube.com/watch?v=CYtsEIfpSOg
# 산울림 노래모음 : BEST 15곡 https://www.youtube.com/watch?v=ZBE1McRB5Qg
# 도시의 그림자(Shadow of City) - 도시의 그림자 (Full Album) https://www.youtube.com/watch?v=LW14PKtNvws
# ♣등려군 노래 모음 11곡♣ https://www.youtube.com/watch?v=tIoLOB1fRgo
#
### MY YOUTUBE URLS END
#
### TEST END
#
### MY LOCAL MUSIC - my music directories in my local computer.
#
# 아이유 - 꽃갈피 둘/
# 김광석 [2005 Best]/
# fav/
# Camila Cabello/
# moana/
# sia/
#
### MY LOCAL MUSIC END
