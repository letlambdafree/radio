#!/bin/bash

# radio - Bash shell script for listening radio basically

# Copyright 2020, Taeseong Ryu <formeu2s@gmail.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License at <http://www.gnu.org/licenses/> for
# more details.

### discription:
#
# This script is for my personal purpose like playing music
# from various sources like radio, youtube, local storage.
# In 'select()', you can search narrowly, regex, range and default option.
#
# Usage: radio [name] or radio option [arg ...]
#
# radio
#       - plays a shuffled radio, press 'q' to play the next.
#         this loops infinitely, press Ctrl-c repeatedly to exit.
#
# radio "regex"
#       - plays a searched item.
#         need quote for "or" regex searching like "wordA\|wordB".
#         don't need quote for "and" regex searching, only need white-space.
#         use -v for inverting match
#         select items like 3-5 7 11 15-20, -2 6- ,  2  - 7  8
#         search narrowly until only one chosen or all chosen
#         press 00 to select all items
#         ex) radio "sia\|live\|tv" cam "mango\|full"
#             radio sia -v lsd : include "sia" but not "lsd"
#
# Options:
#
# -a | --all
#       - displays all urls
#
# -g | --group {en|kr|jp|mv|lt|ln|lc|pl}
#       - plays a shuffled radio in a group, press 'q' to play the next.
#         this loops infinitely, press Ctrl-c repeatedly to exit.
#         ex) radio -g jp : play only the Japanese radio randomly
#
# -l | --local ["regex"]
#       - plays a shuffled local music.
#         this loops infinitely, press Ctrl-c repeatedly to exit.
#         ex) radio -l sia : play only local files with sia
#
# -x | --xxx ["regex"]
#       - plays a XXX for private
#       - asks your password for bypassing a blocked site
#
# -y | --youtube [option] [phrase]
#       - searches a phrase in youtube and plays the urls
#       - if no option and no phrase, display the cached phrases
#       - use alias : alias yt='radio -y', then yt 'something'
#       - options
#         -d : delete the cached phrase
#         -u : update the cached phrase
#         -c : only search in the cached phrases
#
# -t | --test
#       - tests all radios whether work or not.
#         If failed, it logs on the file named report.
#
# -e | --edit
#       - edit this script.
#
# -h | --help
#       - prints this help.
#
# Exit Status:
# Returns success unless an invalid option is given.

### TODO
#
# curl, google code
# completion suggest for radio -y -c 'cashed phrase'
# visit the web-page playing youtube_search's result with web-browser
# show more, show less



shopt -s globstar # Allow ** for recursive matches
set -u # avoid a undeclared variable
g_arg=( "$@" )
g_arg0="$0"
PROGRAM_NAME="${g_arg0##*/}"
BASH_VERSION='5.0.18(1)-release'
PROGRAM_VERSION=0.1
PS3='
# 00 for all
choose : '
PLAYER=mpv
LOCAL_VIDEO_DIR=/mnt/data/Videos/
LOCAL_MUSIC_DIR=/mnt/data/Music/
LOCAL_MUSIC_EXT='.*\.(mp3|flac)$'
RADIO_START_LINE='### MY RADIO URLS'
RADIO_END_LINE='### MY RADIO URLS END'
YOUTUBE_START_LINE='### MY YOUTUBE URLS'
YOUTUBE_END_LINE='### MY YOUTUBE URLS END'
LOCAL_START_LINE='### MY LOCAL MUSIC'
LOCAL_END_LINE='### MY LOCAL MUSIC END'
TEST_END_LINE='### TEST END'
SCRIPT_PATH=$(realpath "$g_arg0") # test
SCRIPT_DIR="${SCRIPT_PATH%/*}"
REPORT_PATH="$SCRIPT_DIR"/report
ARR_YOUTUBE_RESULT="$SCRIPT_DIR"/arr_youtube_result
ARR_YOUTUBE_SEARCH="$SCRIPT_DIR"/arr_youtube_search
REPORT_START_LINE='### ERROR REPORT'
XXX_FILE_PATH="$SCRIPT_DIR"/xxx
NOTSODEEP_PATH="$HOME"/git/notsodeep/notsodeep
yt_prefix=https://www.youtube.com/watch?v=
TEST_TIME=10 # sec
PERIOD_TIME=600
#
# basic regex escape ‘\?’, ‘\+’, ‘\|’, ‘\{’, '\}', ‘\(’, and ‘\)’
#
SKIP_PATTERN='^#\?$\|^##\+\|^#[^ ]\|^#  \+'
E_IN_A_ROW=64
E_NO_MATCH_REGEX=65
E_FAIL_DUMP_YOUTUBE=66
E_NO_PARAM=99


search_linenumber() {
    local arg1="$1"
    local arg2="$2"
    declare -g x=0
    if [[ -f "$arg1" ]]; then
        while read -r line; do
            ((x++))
            [[ $line =~ $arg2 ]] && break # unquote for regex
        done < $arg1
    else
        while read -r line; do
            ((x++))
            [[ $line =~ $arg2 ]] && break
        done <<< $arg1
    fi
    # test_print search_linenumber $x
    return 0
}

back_trace() {
    local maxlength
    for key in ${!FUNCNAME[@]}; do
        if (( ${#FUNCNAME[$key]} > ${maxlength:-0} )); then
            maxlength=${#FUNCNAME[$key]}
        fi
    done
    # printf "\n %-${maxlength}s : %5d" \
    #        LINENO ${LINENO}
    for key in ${!BASH_LINENO[@]}; do
        printf "\n %-${maxlength}s : %5d" \
               ${FUNCNAME[$key]} ${BASH_LINENO[$key]}
    done
    printf '\n'
}

test_print() {
    local arg1="${1:-0}"
    local arg2="$2"
    local arg3="$3"
    local itemsnumber=0
    local format1='\n\e[1;38;5;40m%s item %s\e[0m\n'
    local format2='\n\e[1;38;5;40m%s items %s\e[0m\n'
    local format3='\n\e[1;38;5;220m%s: %s\n\e[1;38;5;240m%s\e[0m'
    printf "$format3" \
           "${FUNCNAME[1]}()'s at $arg1" \
           "$arg2" \
           "$arg3"

    [[ -n $arg3 ]] && itemsnumber=$(wc -l <<< $arg3)
    if (( $itemsnumber == 1 )); then
        printf "$format1" $itemsnumber
    elif (( $itemsnumber > 1 )); then
        printf "$format2" $itemsnumber
    else
        printf "$format1" no
    fi
    return 0
}

print_youtube_caches() {
    local arg1="$1"
    local arg2="$2"
    local arg3="$3"
    local itemsnumber=0
    local format1='\n\e[1;38;5;40m%s item %s\e[0m\n'
    local format2='\n\e[1;38;5;40m%s items %s\e[0m\n'
    local format3='\n\e[1;38;5;220m%s\n\e[1;38;5;240m%s\e[0m'
    printf "$format3" \
           "${FUNCNAME[1]}()'s $arg1" \
           "$arg2"
    if (( $arg3 == 1 )); then
        printf "$format1" $arg3
    elif (( $arg3 > 1 )); then
        printf "$format2" $arg3
    else
        printf "$format1" no
    fi
    return 0
}

print_shuffle_list() {
    local arg1="$1"
    local format1='\n\e[1;38;5;220m%s\e[0m\n'
    local format2='\n\e[1;38;5;240m%s\e[0m\n'
    local format3='\n\e[1;38;5;196m%s\e[0m\n\n'
    local format4='\e[1;38;5;24m%s\e[0m'
    local format5='\e[1;38;5;25m%s\e[0m'
    local format6='\e[1;38;5;26m%s\e[0m'
    local format7='\e[1;38;5;27m%s\e[0m'
    local items_number=0
    printf "$format1" shuffle_list
    printf "$format2" \
           "$(printf %b "$arg1")" # need " " for printf and " " for arg1
    [[ -n $arg1 ]] && items_number=$(wc -l <<< $arg1)
    if (( $n_init_shuffle_list == 0 )); then
        printf "$format7" 'no item'
    elif (( $n_init_shuffle_list == 1 )); then
        printf "$format7" '1 item'
    elif (( $items_number == 1 )); then
        printf "\n${format7}${format6}${format5} ${format4}\n" \
               $items_number \
               '/' \
               $n_init_shuffle_list \
               'item'
    elif (( $items_number > 1 )); then
        printf "\n${format7}${format6}${format5} ${format4}\n" \
               $items_number \
               '/' \
               $n_init_shuffle_list \
               'items'
    else
        printf "$format3" ' Something is wrong!'
        back_trace
        exit 1
    fi
    return 0
}

playing_youtube_print() {
    local arg1="$1"
    local arg2="$2"
    local arg3="$3"
    local arg4="$4"
    local arg5="$5"
    local arg6="$6"
    local arg7="$7"
    local format1='\n\e[1;38;5;130m%s\e[0m\n'
    local format2="\n\e[1;38;5;142m%s | %.2f | %s | %s | %s\e[0m\n"
    local format3="\n\e[1;38;5;144m%s\e[0m\n\n"
    local arg5_h arg5_m arg5_s
    # test_print ${LINENO} arg1 "$arg1"
    # test_print ${LINENO} arg2 "$arg2"
    # test_print ${LINENO} arg3 "$arg3"
    # test_print ${LINENO} arg4 "$arg4"
    # test_print ${LINENO} arg5 "$arg5"
    # test_print ${LINENO} arg6 "$arg6"
    # test_print ${LINENO} arg7 "$arg7"
    arg1=$(printf %b "$arg1")  # title
    arg2=$(date -d $arg2 +%Y/%m/%d) # date
    arg3=$(echo "$arg3 * 20" | bc) # rating
    arg4=$(numfmt --to=si $arg4 | sed 's/G/B/') # count
    if (( $arg5 )); then # duration
        arg5_h=$((arg5/3600))
        arg5_m=$((arg5/60%60))
        arg5_s=$((arg5%60))
        if (( arg5_h )); then
            arg5=$(printf "%02d:%02d:%02d" \
                          $arg5_h \
                          $arg5_m \
                          $arg5_s)
        elif (( arg5_m )); then
            arg5=$(printf "%02d:%02d" \
                          $arg5_m \
                          $arg5_s)
        else
            arg5=$(printf "%02d" \
                          $arg5_s)
        fi
    else
        arg5=LIVE
    fi
    arg6=$(printf %b "$arg6") # uploader
    arg7=$(printf %b "$arg7") # description
    printf "$format1" \
           "$arg1"
    printf "$format2" \
           "$arg2" \
           $arg3 \
           "$arg4" \
           "$arg5" \
           "$arg6"
    #
    # remove too short description
    #
    if (( $(wc -w <<< $arg7) >= 3 )); then
        printf "$format3" \
               "$arg7"
    fi
    return 0
}

playing_print() {
    local arg1="$1"
    local format1='\n\e[1;38;5;130m %s\e[0m\n\n'
    local format2="\e[1;38;5;240m %s | %.2f%s%s%s%s\e[0m\n\n"
    # test_print ${LINENO} arg1 "$arg1"
    if [[ $arg1 =~ https?:// ]]; then
        printf "$format1" "$(sed 's/http.*//' <<< $arg1)"
    elif [[ $arg1 =~ /$ ]]; then
        printf "$format1" "$arg1"
    elif [[ $arg1 =~ /mnt/ ]]; then
        printf "$format1" "$(sed 's!/mnt/.*!!' <<< $arg1)"
    else
        printf "$format1" "$arg1"
    fi
    return 0
}

make_namelist() {
    #
    # grep 'and' option
    #
    local arg1="$1"
    local reverse=
    declare -g input_lines=
    if [[ -n ${REPLY:-} ]]; then
        readarray -t array_namelist <<< ${REPLY/ /$'\n'} # test
    else
        array_namelist=( "${g_arg[@]}" ) # need " " like 'lsd sia'
    fi
    for line in "${array_namelist[@]}"; do
        if [[ -z $input_lines ]]; then
            # test_print ${LINENO} line1 "$line"
            [[ $line =~ ^-+[a-z]+ ]] && continue
            input_lines=$(grep -i "$line" <<< $arg1)
        else
            # test_print ${LINENO} line2 "$line"
            if [[ $line == -v ]]; then
                reverse=v
                continue
            fi
            input_lines=$(grep -i$reverse "$line" <<< $input_lines)
            [[ -n $reverse ]] && reverse=
        fi
    done
    if [[ -z $input_lines ]]; then
        printf '\n \e[1;31m%s\e[0m\n\n' \
               'No match with regex'
        exit 65
    fi
    return 0
}

make_shuffle_list() {
    local arg1="$1"
    local print_name print_names
    arg1=$(sed 's/^# //' <<< $arg1)
    for line in "$arg1"; do
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            print_name=$(sed 's/.*"title" "//' <<< $line \
                                  | sed 's/" "webpage_url" ".*//')
        elif [[ $line =~  https?:// ]]; then
            print_name=$(sed 's/ http.*//' <<< $line)
        elif [[ $line =~ ^/mnt/ ]]; then
            print_name=$(sed 's!.*/Music/!!'<<< $line)
        elif [[ $line =~  /mnt/ ]]; then
            print_name=$(sed 's!/mnt/.*!!' <<< $line)
        else
            print_name="$line"
        fi
        print_names+=${print_names:+\n}"$print_name"
    done
    print_shuffle_list "$print_names"
    return 0
}

shuffle_list() {
    #
    # all items must be selected only once for one-cycle
    #
    # uses shuf
    #
    local arg1="$1"
    local firstshuffle
    declare -g shufflelist n_init_shuffle_list shuffleradio lastshuffle
    # test_print ${LINENO} arg1 "$arg1"
    [[ -z $arg1 ]] && exit $E_NO_PARAM
    if [[ -z ${shufflelist:-} ]]; then
        n_init_shuffle_list=$(wc -l <<< $arg1)
        firstshuffle=$(shuf -n 1 <<< $arg1)
        #
        # avoid selecting the same item in a row
        #
        if [[ $firstshuffle == ${lastshuffle:-} ]]; then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   continue
            return $E_IN_A_ROW
        else
            make_shuffle_list "$arg1"
            shufflelist=$(grep -vF "$firstshuffle" <<< $arg1) # needed -F
            shuffleradio="$firstshuffle"
        fi
    else
        make_shuffle_list "$shufflelist"
        lastshuffle=$(shuf -n 1 <<< $shufflelist)
        shufflelist=$(grep -vF "$lastshuffle" <<< $shufflelist)
        shuffleradio="$lastshuffle"
    fi
    # eval "$2=\$arg2" # bash special form for returning a string
    return 0
}

play_youtube() {
    local arg1="$1"
    local execute_part name_part
    local playing_date playing_average_rating playing_view_count
    local playing_duration playing_title
    local playing_uploader playing_description
    local pattern1 pattern2 pattern3 pattern4
    local pattern5 pattern6 pattern7 pattern8
    # test_print ${LINENO} arg1 "$arg1"
    name_part=$(sed 's! "webpage_url" .*!!' <<< $arg1)
    # test_print ${LINENO} name_part "$name_part"
    execute_part=$(sed 's!.* "webpage_url" !!' <<< $arg1)
    # test_print ${LINENO} execute_part "$execute_part"
    pattern1='s/^"\([0-9]\{8\}\)" .*/\1/'
    pattern2='s/.* "average_rating" \([0-9.]\+\) .*/\1/'
    pattern3='s/.* "view_count" \([0-9]\+\) .*/\1/'
    pattern4='s/.* "duration" \([0-9]\+\) .*/\1/'
    pattern5='s/.* "title" "//'
    pattern6='s/.* "uploader" "\(.*\)" "description" ".*/\1/'
    pattern7='s/.* "description" "//'
    pattern8='s/"\(.*\)" "uploader" ".*/\1/'
    playing_date=$(sed "$pattern1" <<< $name_part)
    playing_average_rating=$(sed "$pattern2" <<< $name_part)
    playing_view_count=$(sed "$pattern3" <<< $name_part)
    playing_duration=$(sed "$pattern4" <<< $name_part)
    playing_title=$(sed "$pattern5" <<< $name_part \
                        | sed 's/"$//')
    playing_uploader=$(sed "$pattern6" <<< $execute_part)
    playing_description=$(sed "$pattern7" <<< $execute_part \
                              | sed 's/"$//')
    execute_part=$(sed "$pattern8" <<< $execute_part)
    test_print ${LINENO} playing_date "$playing_date"
    test_print ${LINENO} playing_average_rating "$playing_average_rating"
    test_print ${LINENO} playing_view_count "$playing_view_count"
    test_print ${LINENO} playing_duration "$playing_duration"
    test_print ${LINENO} playing_title "$playing_title"
    test_print ${LINENO} playing_uploader "$playing_uploader"
    test_print ${LINENO} playing_description "$playing_description"
    playing_youtube_print "$playing_title" \
                          $playing_date \
                          $playing_average_rating \
                          $playing_view_count \
                          $playing_duration \
                          "$playing_uploader" \
                          "$playing_description"
    #
    # 1>/dev/null disable information
    # 2>/dev/null disable process-bar
    # &>/dev/null disable all
    #
    $PLAYER "$execute_part" 2>/dev/null
    return 0
}

play() {
    local arg1="$1"
    local execute_part name_part head_part option_part
    # test_print ${LINENO} arg1 "$arg1"
    if [[ $arg1 =~  https?:// ]]; then
        name_part=$(sed 's! https\?://.*!!' <<< $arg1)
    elif [[ $arg1 =~ /$ ]]; then
        name_part="$arg1"
    elif [[ $arg1 =~ ^/mnt/ ]]; then
        name_part=$(sed 's!.*/Music/!!g' <<< $arg1)
    elif [[ $arg1 =~  /mnt/ ]]; then
        name_part=$(sed 's! /mnt/.*!!' <<< $arg1)
    else
        printf '\n \e[1;31m%s\e[0m\n\n' \
               'Something is wrong!'
        back_trace
        exit 1
    fi
    # test_print ${LINENO} name_part "$name_part"
    if [[ $arg1 =~  https?:// ]]; then
        execute_part=${arg1/*http/http}
    elif [[ $arg1 =~ /$ ]]; then
        execute_part="$LOCAL_MUSIC_DIR""$arg1"
    elif [[ $arg1 =~ ^/mnt/ ]]; then
        execute_part="$arg1"
    elif [[ $arg1 =~  /mnt/ ]]; then
        execute_part=${arg1/*mnt//mnt}
    else
        printf '\n \e[1;31m%s\e[0m\n\n' \
               'Something is wrong!'
        back_trace
        exit 1
    fi
    #test_print ${LINENO} execute_part "$execute_part"
    playing_print "$name_part"

    if [[ $execute_part =~  --[a-z]+ ]]; then
        head_part=${execute_part%% --*} # need space for trailing
        option_part=${execute_part#"$head_part" } # need quotes
        # test_print ${LINENO} head_part $head_part"
        # test_print ${LINENO} option_part "$option_part"
        $PLAYER "$head_part" $option_part # don't quote options
    else
        $PLAYER "$execute_part"
    fi
    return 0
}

play_radio() {
    while true; do
        radiolist=$(grep -v "$SKIP_PATTERN" <<< $radiolist)
        shuffle_list "$radiolist"
        (( $? == $E_IN_A_ROW )) && continue
        play "$shuffleradio"
        sleep 0.1 # needed for C-c
    done
    return 0
}

show_all(){
    radio .
    return 0
}

play_group() {
    x=0
    while read -r line; do
        ((x++))
        # test_print ${LINENO} urllist $urllist
        # test_print ${LINENO} x $x
        case "${g_arg[1]}" in
            en | english    ) [[ $line =~ ^'## English Radio'  ]] && break;;
            kr | korean     ) [[ $line =~ ^'## Korean Radio'   ]] && break;;
            jp | japanese   ) [[ $line =~ ^'## Japanese Radio' ]] && break;;
            mv | musicvideo ) [[ $line =~ ^'## Music Video'    ]] && break;;
            lt | livetv     ) [[ $line =~ ^'## Live TV'        ]] && break;;
            ln | livenews   ) [[ $line =~ ^'## Live News'      ]] && break;;
            lc | livecam    ) [[ $line =~ ^'## Live Camera'    ]] && break;;
            pl | playlist   ) [[ $line =~ ^'## Play List'      ]] && break;;
            *)
                printf '\n %s\e[1;31m %s\e[0m %s\n' \
                       'There is no' \
                       "'${g_arg[1]}'" \
                       'group.'
                printf '\n Usage : radio -g option'
                printf '\n option: en - English Radio'
                printf '\n         kr - Korean Radio'
                printf '\n         jp - Japanese Radio'
                printf '\n         mv - Music Video'
                printf '\n         lt - Live TV'
                printf '\n         ln - Live News'
                printf '\n         lc - Live Camera'
                printf '\n         pl - Play List\n'
                # back_trace
                exit 2
                ;;
        esac
    done <<< $urllist
    # test_print ${LINENO} x $x
    grouplist=$(tail -n +$((x+2)) <<< $urllist)
    search_linenumber "$grouplist" "^##+"
    grouplist=$(head -n $((x-2)) <<< $grouplist)
    while true; do
        grouplist=$(grep -v "$SKIP_PATTERN" <<< $grouplist)
        shuffle_list "$grouplist"
        (( $? == $E_IN_A_ROW )) && continue
        play "$shuffleradio"
        sleep 0.1 # needed for C-c
    done
    return 0
}

select_one_input_line() {
    namescount=$(wc -l <<< $input_lines)
    (( $namescount > 1 )) && select_list "$arg1" "$input_lines"
    return 0
}

select_play() {
    local shuffle_line
    # test_print ${LINENO} arg1 "$arg1" # arg1 is select_list()'s
    while true; do
        shuffle_list "$input_lines"
        (( $? == $E_IN_A_ROW )) && continue
        # test_print ${LINENO} shuffleradio "$shuffleradio"
        shuffle_line=$(grep -iF "$shuffleradio" <<< $arg1)
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            play_youtube "$shuffle_line"
        else
            play "$shuffle_line"
        fi
        sleep 0.1 # needed for C-c
    done
    return 0
}

select_all() {
    printf '\n %s\n' \
           'You chose all items.'
    select_play
    return 0
}

select_sed() {
    printf '\n %s\n' \
           'You selected multiple items with - and numbers.'
    #
    # transform for sed
    #  3-5 7 11 15-20         --> 3,5p;7p;11p;15,20p
    #    3     -5  7  8-   9  --> 3,5p;7p;8,9p
    #   -  2     6  -         --> 1,2p;6,{endline}p
    #
    REPLY=$(sed 's/^ \+\| \+$//g' <<< $REPLY \
                | sed 's/ \+/ /g' \
                | sed 's/ -\|- /-/g' \
                | sed 's/ /p;/g' \
                | sed 's/-/,/g' \
                | sed 's/^,/1,/' \
                | sed "s/,$/,$grepcount/" \
                | sed 's/$/p/')
    # test_print ${LINENO} REPLY "$REPLY"
    input_lines=$(sed -n "$REPLY" <<< $input_lines)
    select_one_input_line
    select_play
    return 0
}

select_regex() {
    printf '\n %s\n' \
           'You selected items with regex.'
    make_namelist "$input_lines"
    # test_print ${LINENO} input_lines "$input_lines"
    select_one_input_line
    select_play
    return 0
}

select_list() {
    local arg1="$1"
    local arg2="$2"
    local pattern1='[0-9]*[-\ ]+[0-9]*'
    local pattern2='[^0-9\ -]+'
    local input_name_part
    grepcount=$(grep -ic .  <<< $input_lines)
    if (( $grepcount == 1 )); then
        #
        # grep '-F' for only string like "[live] tv"
        #
        grepline=$(grep -iF "$arg2" <<< $arg1)
        play "$grepline"
        sleep 0.1 # needed for C-c
    elif (( $grepcount > 1 )); then
        if [[ ${FUNCNAME[@]} =~ youtube_search ]]; then
            #
            # "title" "도시의 그림자 -\n이 어둠의 이슬픔"
            # in select(), added one more line
            #
            input_name_part=$(sed 's/.* "title" "//' <<< $arg2 \
                                  | sed 's/" "webpage_url" ".*//' \
                                  | sed 's/\\n/ /')
            # test_print ${LINENO} input_name_part "$input_name_part"
        elif [[ $arg2 =~  https?:// ]]; then
            input_name_part=$(sed 's! https\?://.*!!' <<< $arg2)
        elif [[ $arg2 =~ ^/mnt/ ]]; then
            input_name_part=$(sed 's!.*/Music/!!g' <<< $arg2)
        elif [[ $arg2 =~  /mnt/ ]]; then
            input_name_part=$(sed 's! /mnt/.*!!' <<< $arg2)
        elif [[ $arg2 =~  /$ ]]; then
            input_name_part="$arg2"
        else
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   'Something is wrong!'
            back_trace
            exit 1
        fi
        input_name_part=$(printf %b "$input_name_part") # Unicode-to-utf8
        # test_print ${LINENO} input_name_part "$input_name_part"
        readarray -t arr_names <<< $input_name_part
        printf '\n' # needed
        select line in "${arr_names[@]}"; do
            if [[ $REPLY =~ ^00$ ]]; then
                select_all
                exit 0
            elif [[ $REPLY =~ $pattern1 && ! $REPLY =~ $pattern2 ]]; then
                select_sed
                exit 0
            elif [[ $REPLY =~ [^0-9] ]]; then
                select_regex
                exit 0
            elif [[ -n $line ]]; then
                selected="$line"
                break
            else
                printf '\n \e[1;31m%s\e[0m\n' \
                       'Something is wrong!'
                back_trace
                exit 1
            fi
        done
        grepline=$(grep -iF "$selected" <<< $arg1)
        play "$grepline"
        sleep 0.1 # needed for C-c
        exit 0
    fi
}

play_local() {
    search_linenumber "$urllist" "^$LOCAL_START_LINE"
    locallist=$(tail -n +$((x+2)) <<< $urllist)
    search_linenumber "$locallist" "^##+"
    locallist=$(head -n $((x-2)) <<< $locallist \
                    | sed 's/^# //')
    if [[ -z ${g_arg[1]:-} ]]; then
        while true; do
            locallist=$(grep -v "$SKIP_PATTERN" <<< $locallist)
            shuffle_list "$locallist"
            (( $? == $E_IN_A_ROW )) && continue
            play "$shuffleradio"
            sleep 0.1 # needed for C-c
        done
    else
        locallist=
        for file in "$LOCAL_MUSIC_DIR"**/*; do
            if [[ $file =~ $LOCAL_MUSIC_EXT ]]; then
                locallist+="${locallist:+$'\n'}$file"
            fi
        done
        # test_print ${LINENO} locallist "$locallist"
        make_namelist "$locallist"
        select_list "$locallist" "$input_lines"
    fi
    return 0
}

test_items() {
    local lastbgpid
    search_linenumber "$urllist" "^$TEST_END_LINE"
    testlist=$(head -n +$x <<< "$urllist")
    cat > "$REPORT_PATH" <<< $REPORT_START_LINE
    while read -r line; do
        (( $(grep -c "$SKIP_PATTERN" <<< $line) )) && continue
        playing_print "$line"
        $PLAYER $(sed 's/.*http/http/' <<< $line) &
        lastbgpid=$!
        sleep $TEST_TIME
        if (( $(ps aux | grep -c $lastbgpid) == 1 )); then
            echo "$line" >> "$REPORT_PATH"
        else
            kill $lastbgpid
        fi
        sleep 0.1
    done <<< $testlist
    printf '\n %s\n' \
           "$(cat $REPORT_PATH)"
    return 0
}

edit_this() {
    $EDITOR "$g_arg0"
    return 0
}

print_version() {
    printf '\n%s\n' \
           "$PROGRAM_VERSION"
    return 0
}

help_usage() {
    search_linenumber "$g_arg0" '^# Usage: '
    helplist=$(tail -n +$x "$g_arg0")
    search_linenumber "$helplist" ^$
    helplist=$(head -n $x <<< $helplist)
    printf '\n%s\n' \
           "$(sed 's/#\+//' <<< $helplist)" # need " "
    return 0
}

bypass_site() {
    #
    # bypass for the blocked sites
    #
    if (( ! $(ps -A | grep -c notsodeep) )); then
        sudo iptables \
             -A INPUT \
             -p tcp \
             --tcp-flags SYN,ACK SYN,ACK \
             --sport 443 \
             -j NFQUEUE \
             --queue-num 200 \
             --queue-bypass
        sudo "$NOTSODEEP_PATH" &
    fi
}

play_xxx() { # private
    bypass_site
    xxxlist=$(grep . "$XXX_FILE_PATH")
    # test_print ${LINENO} xxxlist "$xxxlist"
    make_namelist "$xxxlist"
    input_lines=$(grep -v "$SKIP_PATTERN" <<< $input_lines \
                      | sed 's/^# //')
    # test_print ${LINENO} input_lines "$input_lines"
    select_list "$xxxlist" "$input_lines"
    # sudo pkill notsodeep
    return 0
}

youtube_search() {
    #
    # uses youtube-dl's json-dump and jq
    #
    local s_phrase="${g_arg[@]:1}"
    local s_limit=100 # it takes 8 secs to get 10 items, so need cache
    local max_cache=10000000
    local display_c_Phrase_limit=100 # modify later
    local try_dump_limit=1000
    local result=
    local r_list r_date r_rating r_count r_duration
    local r_title r_url r_uploader r_description
    local arr_date arr_rating arr_count arr_duration # arr need declare local?
    local arr_title arr_url arr_uploader arr_description
    local c_phrase s_rate d_phrase d_matched u_matched
    local lastline lastdate dots
    local i=0 j=0 c=0
    if [[ -e $ARR_YOUTUBE_SEARCH ]]; then
        source "$ARR_YOUTUBE_SEARCH"
        source "$ARR_YOUTUBE_RESULT"
    else
        declare -A arr_search arr_result
    fi
    if [[ -z ${g_arg[1]:-} ]]; then
        for line in "${!arr_result[@]}"; do
            ((j++))
            if (( j > $display_c_Phrase_limit )); then
                c_phrase+="${c_phrase:+ }'$line' ..."
                break
            fi
            c_phrase+="${c_phrase:+ }'$line'"
        done
        print_youtube_caches c_phrase "$c_phrase" ${#arr_result[@]}
        exit 2
    elif [[ ${g_arg[1]} == -d ]]; then  # -d delete the cached_phrase
        d_phrase="${g_arg[@]:2}"
        for line in "${!arr_result[@]}"; do
            if [[ $line == $d_phrase ]]; then
                d_matched=1
                unset arr_result["$d_phrase"] # need $ and " "
                unset arr_search["$d_phrase"]
                declare -p arr_search > "$ARR_YOUTUBE_SEARCH"
                declare -p arr_result > "$ARR_YOUTUBE_RESULT"
                break
            fi
        done
        if (( $d_matched )); then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   "success for deletion with '$d_phrase'"
            exit 0
        else
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   "not matched with '$d_phrase'"
            exit 1
        fi
    elif [[ ${g_arg[1]} == -c ]]; then  # -c search in the c_phrase
        s_phrase="${g_arg[@]:2}"
        for key in "${!arr_result[@]}"; do
            if [[ $key == $s_phrase ]]; then
                result="${arr_result[$key]}" # remove " "?
                s_rate=$((${arr_search[$s_phrase]}+1))
                arr_search[$s_phrase]=$s_rate
                break
            fi
        done
        if [[ -z $result ]]; then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   'There is no cached_phrase.'
            exit 2
        fi
    elif [[ ${g_arg[1]} == -u ]]; then # -u update the cached_phrase
        s_phrase="${g_arg[@]:2}"
        for key in "${!arr_result[@]}"; do
            if [[ $key == $s_phrase ]]; then
                s_rate=$((${arr_search[$s_phrase]}+1))
                arr_search[$s_phrase]=$s_rate
                u_matched=1
                break
            fi
        done
        if (( ! $u_matched )); then
            printf '\n \e[1;31m%s\e[0m\n\n' \
                   "not matched with '$update_phrase'"
            exit 1
        fi
    else
        for search in "${!arr_result[@]}"; do
            if [[ $search == $s_phrase ]]; then
                result="${arr_result[$search]}"
                s_rate=$((${arr_search[$s_phrase]}+1))
                arr_search[$s_phrase]=$s_rate
                break
            fi
        done
    fi
    if [[ -z $result ]]; then
        printf '\n'
        while [[ -z $result ]]; do # json-dump often fails
            ((c++))
            if (( $c % 10 == 1)); then
                printf '\e[1;38;5;117m %s\e[0m %s\e[1;38;5;0m %s\e[0m\r' \
                       trying \
                       $c \
                       ${dots:-.}
                 dots=.
            else
                dots+=.
            fi
            if (( $c > $try_dump_limit )); then
                printf '\n \e[1;31m%s\e[0m\n' \
                       'Fail dumping. try later!'
                exit 66
            fi
            printf '\e[1;38;5;117m %s\e[0m %s\e[1;38;5;40m %s\e[0m\r' \
                   trying \
                   $c \
                   $dots
            result=$(youtube-dl -j ytsearch${s_limit}:"$s_phrase" 2>/dev/null)
        done
        printf '\n'
        if (( ${#arr_result[@]} >= $max_cache )); then
            for key in "${!arr_search[@]}"; do
                if (( ${arr_search[$key]} <= ${min_rate:-10} )); then
                    min_rate=${arr_search[$key]}
                    min_key="$key"
                fi
            done
            unset arr_result["$min_key"]
            unset arr_search["$min_key"]
            printf '\n \e[1;31m%s - %s\e[0m\n' \
                   "'$min_key' has been removed" \
                   "$min_rate rated."
        fi
        arr_result+=( ["$s_phrase"]="$result" )
        if [[ -n ${arr_search[$s_phrase]} ]]; then
            arr_search+=( ["$s_phrase"]=${arr_search[$s_phrase]} )
        else
            arr_search+=( ["$s_phrase"]=1 )
        fi
    fi
    #
    # json_dump_key_order:
    #
    # "id": "uploader" "uploader_id" "uploader_url" "channel_id" "channel_url"
    # "upload_date" "license" "creator" "title" "alt_title" "thumbnails"
    # "description" "categories" "tags" "subtitles" "automatic_captions"
    # "duration" "age_limit" "annotations" "chapters" "webpage_url"
    # "view_count" "like_count" "dislike_count" "average_rating" "formats"
    #
    # basic regex escape ‘\?’, ‘\+’, ‘\|’, ‘\{’, '\}', ‘\(’, and ‘\)’
    #
    r_date=$(jq '.upload_date' <<< $result) # for sort
    r_rating=$(jq '.average_rating' <<< $result \
                   | sed 's/.*/"average_rating" \0/') # another method?
    r_count=$(jq '.view_count' <<< $result \
                  | sed 's/.*/"view_count" \0/')
    r_duration=$(jq '.duration' <<< $result \
                     | sed 's/.*/"duration" \0/')
    r_title=$(jq '.title' <<< $result \
                  | sed 's/.*/"title" \0/')
    r_url=$(jq '.webpage_url' <<< $result \
                | sed 's/.*/"webpage_url" \0/')
    r_uploader=$(jq '.uploader' <<< $result \
                     | sed 's/.*/"uploader" \0/')
    r_description=$(jq '.description' <<< $result \
                        | sed 's/.*/"description" \0/')
    readarray -t arr_date <<< $r_date # first position
    readarray -t arr_rating <<< $r_rating
    readarray -t arr_count <<< $r_count
    readarray -t arr_duration <<< $r_duration
    readarray -t arr_title <<< $r_title
    readarray -t arr_url <<< $r_url
    readarray -t arr_uploader <<< $r_uploader
    readarray -t arr_description <<< $r_description # # last position
    # test_print ${LINENO} arr_date ${#arr_date[@]}
    # test_print ${LINENO} arr_rating ${#arr_rating[@]}
    # test_print ${LINENO} arr_count ${#arr_count[@]}
    # test_print ${LINENO} arr_duration "${arr_duration[@]}"
    # test_print ${LINENO} arr_url ${#arr_url[@]}
    # test_print ${LINENO} arr_title ${#arr_title[@]}
    # test_print ${LINENO} arr_uploader "${arr_uploader[@]}"
    # test_print ${LINENO} arr_description "${#arr_description[@]}"
    # for line in "${arr_title[@]}" ; do
    #     printf "\n\n"
    #     wc -l <<< "$line"
    #     printf "\n\n"
    # done
    # if (( ${#arr_title[@]} != ${#arr_url[@]} )); then
    #     printf "\n %s / %s / %s\n" \
    #            "titles: ${#arr_title[@]}" \
    #            "urls: ${#arr_url[@]}" \
    #            'sync fails!'
    # else
    #     printf "\n %s / %s / %s\n" \
    #            "titles: ${#arr_title[@]}" \
    #            "urls: ${#arr_url[@]}" \
    #            'sync success!'
    # fi
    for title in "${arr_title[@]}"; do
        r_list+=$(printf "${r_list:+\n}%s %s %s %s %s %s %s %s" \
                         "${arr_date[$i]}" \
                         "${arr_rating[$i]}" \
                         "${arr_count[$i]}" \
                         "${arr_duration[$i]}" \
                         "${arr_title[$i]}" \
                         "${arr_url[$i]}" \
                         "${arr_uploader[$i]}" \
                         "${arr_description[$i]}")
        ((i++))
    done
    r_list=$(sort <<< $r_list)
    lastdate=$(tail -n 1 <<< $r_list | grep -o '[0-9]\{8\}')
    input_lines="$r_list" # for select_list()
    # test_print ${LINENO} input_lines "$input_lines"
    if [[ ${g_arg[1]} != -c ]]; then
        declare -p arr_search > "$ARR_YOUTUBE_SEARCH"
        declare -p arr_result > "$ARR_YOUTUBE_RESULT"
    fi
    PS3="
Last uploaded: $lastdate
choose : "
    select_list "$r_list" "$input_lines"
    return 0
}



search_linenumber "$g_arg0" "^$RADIO_START_LINE"
urllist=$(tail -n +$((x+2)) "$g_arg0")
# test_print ${LINENO} urllist "$urllist"
search_linenumber "$urllist" "^$RADIO_END_LINE"
radiolist=$(head -n +$((x-2)) <<< $urllist)
# test_print ${LINENO} radiolist "$radiolist"

#
# case uses * ? [...] | as matching pattern
# it doesn't use regex and variables basically
# if you need these, use regex condition: [[  =~  ]]
#
case "${g_arg[0]:-}" in
    ''             ) play_radio     && exit 0;;
    -a | --all     ) show_all       && exit 0;;
    -g | --group   ) play_group     && exit 0;;
    -l | --local   ) play_local     && exit 0;;
    -x | --xxx     ) play_xxx       && exit 0;;
    -y | --youtube ) youtube_search && exit 0;;
    -t | --test    ) test_items     && exit 0;;
    -e | --edit    ) edit_this      && exit 0;;
    -v | --version ) print_version  && exit 0;;
    -h | --help    ) help_usage     && exit 0;;
    -*)
        printf '\n %s\e[1;31m %s\e[0m %s\n' \
               'There is no' \
               "'${g_arg[0]}'" \
               'option.'
        printf '\n Usage : radio [name] or radio option [arg ...]'
        printf '\n option: -a displays all urls'
        printf '\n         -g {en|kr|jp|mv|lt|ln|lc|pl} plays a group'
        printf '\n         -l ["regex"] plays a shuffled local music.'
        printf '\n         -x ["regex"] plays a XXX for private.'
        printf '\n         -y [option] [phrase] searches a phrase in youtube'
        printf '\n         -t tests all radios'
        printf '\n         -e edit this script.'
        printf '\n         -h prints version'
        printf '\n         -h prints help\n'
        exit 2
        ;;
esac
make_namelist "$urllist"
input_lines=$(grep -v "$SKIP_PATTERN" <<< $input_lines \
                  | sed 's/^# //')
# test_print ${LINENO} input_lines "$input_lines"
select_list "$urllist" "$input_lines"



# ### - source
# ##  - group
# #   - url
#
### MY RADIO URLS - from a latte applet in KDE.
#
## English Radio
#
# BBC Radio London 94.9 FM http://bbcmedia.ic.llnwd.net/stream/bbcmedia_lrldn_mf_p
# NPR 24h Program Stream https://npr-ice.streamguys1.com/live.mp3
# CNN HLN http://tunein.streamguys1.com/cnnhln
# Fox News Radio https://streaming-ent.shoutcast.com/foxnews
# KWSU 1250 Northwest Public Radio NPR News - Pullman, WA http://streams.nwpr.org:8000/NWPRNEWS
# WNPR 90.5 Connecticut Public Radio - Meriden, CT http://16113.live.streamtheworld.com/WNPRFM_SC
# 90.5 WESA Pittsburgh's NPR New Station https://17273.live.streamtheworld.com:443/WESAFM.mp3
#
## Korean Radio
#
# SBS 러브 FM-SBS 라디오 http://slive.ytn.co.kr:1935/live/fmlive_0624_1.sdp/playlist.m3u8
# gukak http://mgugaklive.nowcdn.co.kr/gugakradio/gugakradio.stream/playlist.m3u8
# FM 95.1 TBS fm http://58.234.158.60:1935/fmlive/myStream/playlist.m3u8
#
## Japanese Radio
#
# KBS World Japanese Radio http://101.79.244.199:1935/cocotv/_definst_/CH00007/playlist.m3u8
# Kishiwada Radio http://61.89.201.27:8000/radikishi.mp3
# Kyoto Living FM (京都リビング FM/きょうと りびんぐ FM) http://musicbird.leanstream.co/JCB104-MP3
# FmHaro!76.1（エフエムハロー!） http://musicbird.leanstream.co/JCB034-MP3
# FM Fujiyama (FMふじやま, JOZZ3CA-FM, 77.6 MHz, Fujikawaguchiko, Yamanashi) http://musicbird.leanstream.co/JCB026-MP3
# Shuunan FM (しゅうなんFM, JOZZ8AJ-FM, 78.4 MHz, Shūnan, Yamaguchi) http://musicbird.leanstream.co/JCB085-MP3
# Air Tesshi (Airてっし, JOZZ1AU-FM, 78.8 MHz, Nayoro, Hokkaido) http://musicbird.leanstream.co/JCB003-MP3
# Umeda FM Be Happy! (ウメダFM Be Happy! 789/エフエムキタ, JOZZ7AK-FM, 78.9MHz, Kita-ku, Osaka) http://musicbird.leanstream.co/JCB068-MP3
# Happy FM Itami (ハッピーエフエムいたみ, JOZZ7AJ-FM, 79.4 MHz, Itami, Hyōgo) http://musicbird.leanstream.co/JCB070-MP3
# FM Yame (FM八女, JOZZ0BY-FM, 80.1 MHz, Yame, Fukuoka) http://musicbird.leanstream.co/JCB086-MP3
# FM Hanako (JOZZ7AA-FM, 82.4 MHz, Moriguchi City, Osaka) http://musicbird.leanstream.co/JCB069-MP3
# Kamakura FM 82.8 (かまくらFM, JOZZ3AF-FM, 82.8 MHz, Kamakura, Kanagawa) http://musicbird.leanstream.co/JCB016-MP3?args=tunein_02
# Ichikawa Urara FM (市川うららFM. JOZZ3AY-FM, 83.0 MHz, Ichikawa, Chiba) http://musicbird.leanstream.co/JCB020-MP3
# Humming FM Takarazuka (ハミングFM宝塚, JOZZ7AT-FM, 83.5 MHz, Takarazuka, Hyōgo) http://musicbird.leanstream.co/JCB071-MP3
# 84.3 FM Edogawa (FMえどがわ, JOZZ3AS-FM, Edogawa City, Tokyo) http://musicbird.leanstream.co/JCB032-MP3
# Shonan Magic Wave (湘南マジックウェィブ, JOZZ3CI-FM, 85.6 MHz, Ōiso, Kanagawa) http://musicbird.leanstream.co/JCB018-MP3
# FM Hana (FMはな, JOZZ1AZ-FM, 87.0 MHz, Nakashibetsu, Hokkaido) http://musicbird.leanstream.co/JCB001-MP3
# Banana FM (バナナエフエム, JOZZ7BE-FM, 87.7 MHz, Wakayama City) http://musicbird.leanstream.co/JCB075-MP3
#
### MY RADIO URLS END
#
### MY YOUTUBE URLS - need a youtube-dl to play a url.
#
## Music Video
#
# Дария «Нуки» Ставрович «Zombie» - Слепые прослушивания – Голос – Сезон 5 https://www.youtube.com/watch?v=pLN-EnS_QLA
# Дария Ставрович «Круги на воде» - Нокауты - Голос - Сезон 5 https://www.youtube.com/watch?v=AW3EJiRD0ho
# Дария Ставрович «Chandelier» - Полуфинал - Голос - Сезон 5 https://www.youtube.com/watch?v=ltV1yoeIoPM
# Sting - Shape of My Heart (Leon) https://www.youtube.com/watch?v=QK-Z1K67uaA
# What's up - EXCELENTE COVER!!! https://www.youtube.com/watch?v=1NNE0b55AoM
# nakashima mika - 僕が死のうと思ったのは (내가 죽으려고 마음먹었던 것은) https://www.youtube.com/watch?v=C6st9z_iaao
# nakashima mika - 中島美嘉『雪の華』 Music Video https://www.youtube.com/watch?v=oIoaIlPpIcA
# Amazarash(아마자라시 - 한글자막)  - 내가 죽으려고 생각한 것은【acoustic live ver】 https://www.youtube.com/watch?v=6SNscvxLP4E
# Sia - Big Girls Cry (Official Video) https://www.youtube.com/watch?v=4NhKWZpkw1Q
# Sia - The Greatest https://www.youtube.com/watch?v=GKSRyLdjsPA
# Sia - Together (from the motion picture Music) https://www.youtube.com/watch?v=vnfGni4_RlI
# Sia - Alive https://www.youtube.com/watch?v=t2NgsJrrAyM
# Sia - Unstoppable https://www.youtube.com/watch?v=H3evCDEXp4I
# Sia - Chandelier (Official Music Video) https://www.youtube.com/watch?v=2vjPBrBU-TM
# Sia - Elastic Heart feat. Shia LaBeouf & Maddie Ziegler (Official Video) https://www.youtube.com/watch?v=KWZGAExj-es
# LSD - Thunderclouds (Official Video) ft. Labrinth, Sia, Diplo https://www.youtube.com/watch?v=mILth-K6KvM
# LSD - No New Friends (Official Video) ft. Labrinth, Sia, Diplo https://www.youtube.com/watch?v=kkUIdK9eaIk
# LSD - Audio (Official Video) ft. Sia, Diplo, Labrinth https://www.youtube.com/watch?v=tjA7nAHOAww
# Queen - Love of My Life https://www.youtube.com/watch?v=v3xwCkhmies
# Queen - Love Of My Life (Live, 1979) https://www.youtube.com/watch?v=Idj__EDPCKk
# Queen - Somebody To Love - HD Live - 1981 Montreal https://www.youtube.com/watch?v=aA2IRoPFIn0
# Queen - Bohemian Rhapsody (Live at Rock Montreal, 1981) [HD] https://www.youtube.com/watch?v=N0dbGGvsjf8
# radiohead - Creep https://www.youtube.com/watch?v=XFkzRNyygfk
# Radiohead - Creep (Best Live Performance) https://www.youtube.com/watch?v=k3_RU30tEIE
# The Cranberries - Zombie 1999 Live Video https://www.youtube.com/watch?v=8MuhFxaT7zo
# This sadness of this darkness https://www.youtube.com/watch?v=9_FSnSQ82T0
# 도시의 그림자 - 이 어둠의 이 슬픔 (1986) https://www.youtube.com/watch?v=BLPQySIh2Jk --start=00:12 --end=04:16 --volume=180
# 도시의 그림자(Shadow of City) - 이 어둠의 이 슬픔 (1986) https://www.youtube.com/watch?v=LW14PKtNvws --start=#3 --end=#4
# 노래얼_김옥희_이 어둠의 이 슬픔_고대 85학번 입학 30주년 기념 모교방문 축제 https://www.youtube.com/watch?v=cmNekU_svwY&list=RDcmNekU_svwY
# 강지민 - 이 어둠의 이 슬픔 (도시의 그림자) https://www.youtube.com/watch?v=lg6IKzPdoes --volume=70
# 심수봉 - 백만송이 장미 (1997년 6월 1일 이소라의 프로포즈) https://www.youtube.com/watch?v=z3Lkc8fEsww
# 떼창 할 수 밖에 없는 심수봉 - 남자는 배 여자는 항구♬ [유희열의 스케치북/You Heeyeol's Sketchbook] 20191220 https://www.youtube.com/watch?v=uRU58V_59jk
# 블랙홀(Black Hole) - 깊은 밤의 서정곡 https://www.youtube.com/watch?v=946hIajM-Hc
#===== local music video file
# Frozen2 - Into the Unknown /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=#5 --end=20:06
# Frozen2 - Show Yourself /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=#15 --end=1:07:07
# Frozen2 - The Next Right Thing /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=#17 --end=1:17:24
# Frozen2 - Some things never change /mnt/data/Videos/Frozen 2 (2019)  [1080p x265 10bit FS93 Joy].mkv --start=09:13 --end=12:38
# Moana - how far I'll go /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=#4 --end=18:45
# Moana - I am Moana /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=1:20:54 --end=1:22:25
# Moana - Where you are /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=07:45 --end=10:10
# Moana - You're welcome /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=38:20 --end=41:04
# Moana - shine /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=1:01:28 --end=1:04:42
# Moana - Tulou Tagaoa /mnt/data/Videos/Moana (2016) 1080p 5.1 - 2.0 x264 Phun Psyz.mp4 --start=23:50 --end=26:00
# Les.Miserables 2012 - Look down /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=55 --end=5:26
# Les.Miserables 2012 - I Dreamed A Dream /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=27:17 --end=31:51
# Les.Miserables 2012 - The Confrontation /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=43:20 --end=45:10
# Les.Miserables 2012 - Paris / Look Down /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=1:06:42 --end=1:09:36
# Les.Miserables 2012 - On My Own /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=1:28:52 --end=1:32:00
# Les.Miserables 2012 - Do You Hear The People Sing? /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=1:35:35 --end=1:37:44
# Les.Miserables 2012 - Epilogue /mnt/data/Videos/Les.Miserables.2012.1080p.BluRay.x265-RARBG.mp4 --start=2:27:55 --end=2:29:40
#===== ani-opening
# Ghost in the shell 1995 - Original Soundtrack /mnt/data/Videos/Ghost.in.the.Shell.1995.JAPANESE.1080p.US.BluRay.H264.AAC-VXT.mp4 --start=03:56 --end=08:20
# Neon Genesis Evangelion (A Cruel Angel's Thesis) Anime Intro Opening Theme HD BluRay (Best Quality) https://www.youtube.com/watch?v=nU21rCWkuJw
# Read or Die Opening https://www.youtube.com/watch?v=jsBpraFks0Y
#
## Live TV
#
# 正在直播：CCTV中文国际 https://www.youtube.com/watch?v=vCDDYb_M2B4
# franceinfo - DIRECT TV - actualité france et monde, interviews, documentaires et analyses https://www.youtube.c
# Tele1 TV | Canlı Yayın ᴴᴰ https://www.youtube.com/watch?v=TDy-nmXZNQM
# Adom TV Live https://www.youtube.com/watch?v=LIb1ADo0pGs
#
## Live News
#
# LIVE 언제, 어디서나 KBS 24시뉴스 https://www.youtube.com/watch?v=cUaptEjecPE
# YTN LIVE 대한민국 24시간 뉴스채널 https://www.youtube.com/watch?v=U_sYIKWhJvk
# live 연합뉴스TV https://www.youtube.com/watch?v=0GN8t2u3flc
# CNA 24/7 LIVE https://www.youtube.com/watch?v=XWq5kBlakcQ
# ANNnewsCH https://www.youtube.com/watch?v=coYw-eVU0Ks
# Taiwan Formosa live news HD https://www.youtube.com/watch?v=XxJKnDLYZz4
# Taiwan EBC 24h live news https://www.youtube.com/watch?v=RaIJ767Bj_M
# Watch NBC News NOW Live https://www.youtube.com/watch?v=6hRk_zPTN1c
# NBC2 Live Stream https://www.youtube.com/watch?v=tPeUHECNLKs
# Watch The Latest News Headlines and Live Events: ABC News Live https://www.youtube.com/watch?v=w_Ma8oQLmSM
# Al Jazeera English | Live https://www.youtube.com/watch?v=_dsWF2prkR8
# Watch Sky News live https://www.youtube.com/watch?v=9Auq9mYxFEE
# Euronews English Live https://www.youtube.com/watch?v=4MHhTZaGt2w
# FRANCE 24 English – LIVE – International Breaking News & Top stories - 24/7 stream https://www.youtube.com/watch?v=FUnJzFT2i84
# LIVE: Puthiya Thalaimurai Live News | Tamil News | Live Tamil News | Ayodhya Ram temple | Sushant https://www.youtube.com/watch?v=AyOCx_DHXJU
# OTV Live 24x7 | Latest News Updates | Coronavirus(COVID-19) News | Unlock 3.0 Updates | Odisha TV https://www.youtube.com/watch?v=Axu-FoqBIXY
# Sakshi TV LIVE | Today 'Telugu News' LIVE  https://www.youtube.com/watch?v=8McTsOqeueE
# Manorama News LIVE TV https://www.youtube.com/watch?v=jjH6v95z3Nw
# Watch SAMAA TV's News LIVE STREAM 24/7 | Full Pakistan coverage https://www.youtube.com/watch?v=vBjv7ZkRzig
# LIVE STREAMING KOMPAS TV 24/7 https://www.youtube.com/watch?v=gIB2egm7tL8
# NETTV LIVE 2020 https://www.youtube.com/watch?v=WZ83bBwWZQY
# Channels Television Live https://www.youtube.com/watch?v=MSQhwpYQbtQ
# TGRT Haber TV Canlı Yayın ᴴᴰ https://www.youtube.com/watch?v=5J8uR3mxq80
# Habertürk TV Canlı Yayın ᴴᴰ https://www.youtube.com/watch?v=deKH0pQ7-rg
#
## Live Camera - often change url address or off the camera
#
# 남산서울타워 파노라마 LIVE https://www.youtube.com/watch?v=uVTcfjw8sBw
# 鍛冶町通りライブカメラ［ザザシティ浜松］PTZ（パンチルトズーム）https://www.youtube.com/watch?v=PvoIqPjZFyA&feature=emb_logo
# Shibuya Scramble Crossing Live Camera https://www.youtube.com/watch?v=jEhIe2SDKso
# 【LIVE CAMERA】渋谷スクランブル交差点 ライブ映像 https://www.youtube.com/watch?v=I6YANW67hQ0
# 【LIVE】Tokyo Shinjuku Live Camera 新宿 大ガード交差点【2020】https://www.youtube.com/watch?v=RQA5RcIZlAM
# Downtown Telluride Live Camera https://www.youtube.com/watch?v=Y_TLxje5Qw4
# 秋葉原ライブカメラ Akihabara live camera YouTube Live version https://www.youtube.com/watch?v=mpFAKw68Je0
# KABUKICHO TOKYO Live Stream https://www.youtube.com/watch?v=kUeDK-f2IMk
# LIVE 道後温泉本館！！正面カメラ https://www.youtube.com/watch?v=vM7_-e0gdsc
# 【ライブ配信】丸沼高原　標高1500ｍ https://www.youtube.com/watch?v=m-U577NAs_U
# WATCH NASA: Earth Viewing cameras - Earth From Space ISS feed https://www.youtube.com/watch?v=DDU-rZs-Ic4
# EarthCam Live: Times Square in 4K https://www.youtube.com/watch?v=mRe-514tGMg
# Times Square: 1560 Broadway View Live https://www.youtube.com/watch?v=4qyZLflp-sI
# Times Square: Express View Live https://www.youtube.com/watch?v=uw0lpuMSe9E&feature=emb_logo
# Las Vegas: AE View Live https://www.youtube.com/watch?v=1ZNCtDLUKHw
# Avalanche Bay Indoor Waterpark, Boyne Mountain https://www.youtube.com/watch?v=mm_fnIJ1c6Q&feature=emb_logo
# Jackson Hole Wyoming USA Town Square Live Cam - SeeJH.com https://www.youtube.com/watch?v=1EiC9bvVGnk
# White Mountains TV Live Cam: North Conway Village https://www.youtube.com/watch?v=eT7Z70L5SPo
# Webcam Lanzarote - Live Stream from the Beachbar in Costa Teguise https://www.youtube.com/watch?v=NHkrWF5HMSE
# Live Stream — Public Square, Watertown NY — Jake Johnson Properties https://www.youtube.com/watch?v=qP1y7Tdab7Y&feature=emb_logo
# Tropical Murphys 1 Live Stream From Chaweng, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=0Ns1sNoUSaY
# Tropical Murphys 2 Live Stream From Chaweng, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=wXsYOpVP-kQ
# LIVE · Thailand / Koh Phangan / Haad Rin · Full Moon Party beach (AI Camera looking for people) https://www.youtube.com/watch?v=-Fen7JP8oHI&feature=emb_logo
# LIVE · Thailand / Koh Phangan · Thong Sala center (Mandolino Pizzeria) https://www.youtube.com/watch?v=1nnt_Beuo88&feature=emb_logo
# Hush Bar Cam, Soi Green Mango, Chaweng, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=wqvStiZyVBI
# Crystal Bay Yacht Club Live Stream From Lamai, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=aJdwAUUbFL8
# Crystal Bay Live Stream From Lamai, Koh Samui, Thailand | Live HD Webcam | SamuiWebcam https://www.youtube.com/watch?v=AK9TkxHCbHU
# LIVE · Thailand / Koh Phangan / Haad Rin · Full Moon Party beach (Seaview Sunrise Resort) https://www.youtube.com/watch?v=9WbCh2AE_NU
# Banff, AB Canada Live Cam https://www.youtube.com/watch?v=Tpchwvyv6yU
# Grancanaria.live | Playa del Inglés - Yumbo Center - LIVE ultraHD 4K PTZ https://www.youtube.com/watch?v=cvYNX6OONW4&feature=emb_logo
# WebCam.NL | www.sportsatsea.nl - live HD PTZ camera. https://www.youtube.com/watch?v=5rkyZrQv674&feature=emb_logo
# Beach Bar live HD Webcam in Cruz Bay https://www.youtube.com/watch?v=GrZ8LL8yAqs&feature=emb_logo
# Live da Club Camping Jesolo International https://www.youtube.com/watch?v=SDIPtTeTUdA
# Live Da Jesolo Spiagge - Oro Beach https://www.youtube.com/watch?v=zE_yzuxFiMo
# Lanzarote Webcam LIVE HD Streaming from Puerto del Carmen Beach (Lanzarote,Canary Islands,Spain) https://www.youtube.com/watch?v=mpd2CHIgJ9A
# Alanya Turkey, Alanya Türkei, Аланья Турция Palmiye Beach Hotel Live Camera https://www.youtube.com/watch?v=hYAaoI2E1Pw
# The central beach of Lignano Sabbiadoro (Italy) - Spiaggia LIVE streaming HD Webcam https://www.youtube.com/watch?v=jB_ix1xoj1c
# Historical city center "Piazza Fontana" of Lignano Sabbiadoro (Italy) - LIVE streaming HD Webcam https://www.youtube.com/watch?v=3J_-o4sB2RU
# Webcam Bari Sardo - Sardegna https://www.youtube.com/watch?v=IbgPG5L-uoI
# LIVE Deerfield Beach - Beach Camera https://www.youtube.com/watch?v=-HAi_5IIAYg&feature=emb_logo
# Underwater Camera in Deerfield Beach, Florida https://www.youtube.com/watch?v=GAv4VCC41oU
# Dania Beach Pier and Beach Cam https://www.youtube.com/watch?v=bEoNVd3spEM&feature=emb_logo
# Sportovní areál - Maškova zahrada, Turnov https://www.youtube.com/watch?v=meUtwDS6fVk&feature=emb_logo
# HC Lomnice nad Popelkou https://www.youtube.com/watch?v=7AGre-USTMc
# Lomnice nad Popelkou - Koupaliště https://www.youtube.com/watch?v=MAIRHYclfyM
# Lomnice nad Popelkou - Koupaliště (kamera 2) https://www.youtube.com/watch?v=sDKNrdqMcqE
# Lomnice nad Popelkou - Husovo náměstí https://www.youtube.com/watch?v=IsJWaa_KMVc
# Lomnice nad Popelkou - TENIS - pohled ke klubovně https://www.youtube.com/watch?v=vPWxzpc0Iek
# Lomnice nad Popelkou - tour https://www.youtube.com/watch?v=qAWlaKoSqa4
# TJ Sokol Nová Ves nad Popelkou, z.s. , fotbalové hřiště https://www.youtube.com/watch?v=Bg2JXM5KcII
# Jinolice - Oborský rybník https://www.youtube.com/watch?v=t1NLP0TJwn8
# Tropical Reef Camera powered by EXPLORE.org https://www.youtube.com/watch?v=F109TZt3nRc
# "Shirahama Ohama Beach" 白浜大浜海水浴場（静岡県下田市） https://www.youtube.com/watch?v=xuP8xIbZvmo
# Frenchy’s Clearwater Beach Cam https://www.youtube.com/watch?v=fa7wCF6JL1w
# 「LIVECAMERA」　草津温泉「湯畑」湯滝前  https://www.youtube.com/watch?v=GzbPVzPnT-U
# 「LIVECAMERA 」草津温泉 西の河原・湯川LIVE https://www.youtube.com/watch?v=iPBW7BBoyIw
# 【LIVE CAMERA】飛騨高山ライブカメラ 陣屋前 /Hida-Takayama,In front of the Takayama Jinya https://www.youtube.com/watch?v=PG8kZQ2EkSQ
# 【ライブ配信】丸沼高原スキー場　標高1400m https://www.youtube.com/watch?v=YqXzpB-ardY
# 上高地河童橋ライブカメラ KAMIKOCHI KAPPA-BASHI LIVE CAMERA https://www.youtube.com/watch?v=8bZTa4CBJ2o
# 【LIVE CAMERA】長門湯本温泉ライブカメラ 恩湯（おんとう）前 https://www.youtube.com/watch?v=sgteH34KgM0
# LIVE 道後温泉本館！！冠山カメラ https://www.youtube.com/watch?v=cqjaUAloHzQ
# 【LIVE CAMERA】飛騨高山ライブカメラ 中橋/Hida-Takayama Naka-Bashi Bridge https://www.youtube.com/watch?v=4hx8Xqj0cXM
# 【LIVE】上野城ライブカメラ 桜島と鹿児島市内 ※音付き（作業用にも） / Sakurajima and Kagoshima city in Japan https://www.youtube.com/watch?v=WCzHpvAoYRY
# 【Live Stream】久里浜遠望カメラ　神奈川県横須賀市　The Sky of Yokosuka, Japan https://www.youtube.com/watch?v=L-oKanVICT8
#
## Play List - my favorite list
#
# 심수봉 노래 모음 https://www.youtube.com/watch?v=-03cg8u5fdU
# 정태춘, 박은옥 히트곡 모음 듣기ㅣ북한강에서, 촛불 https://www.youtube.com/watch?v=TuukzC2chdo
# 김광석 히트곡 모음 (고음질) https://www.youtube.com/watch?v=yxp2CGK_WWE
# 김현식 베스트 명곡 전부 모음 - 고음질 https://www.youtube.com/watch?v=Speml0pUCB4
# 해바라기 - 노래모음 베스트 20곡 https://www.youtube.com/watch?v=zGsIgF3UBpU
# 자우림 (JAURIM), 김윤아 BEST 40곡 좋은 노래모음 - [연속재생] https://www.youtube.com/watch?v=CYtsEIfpSOg
# 산울림 노래모음 : BEST 15곡 https://www.youtube.com/watch?v=ZBE1McRB5Qg
# 도시의 그림자(Shadow of City) - 도시의 그림자 (Full Album) https://www.youtube.com/watch?v=LW14PKtNvws
# ♣등려군 노래 모음 11곡♣ https://www.youtube.com/watch?v=tIoLOB1fRgo
#
### MY YOUTUBE URLS END
#
### TEST END
#
### MY LOCAL MUSIC - my music directories in my local computer.
#
# 아이유 - 꽃갈피 둘/
# 김광석 [2005 Best]/
# fav/
# Camila Cabello/
# moana/
# sia/
#
### MY LOCAL MUSIC END
